/* {{{ */ Selector

box hierarchy   ; margin - box - padding - content (remember mbappe) outtermost to inner most

tags    ; p {  } (select all p tags)
id      ; box1 {  } (select all id="box1")
class   ; box1 {  } (select all class="box1")
*       ; select all the element (good for css reset)
:is     ; pseudo selector, compound selector more tersely
~       ; genreal siblings selector

.card :is(.heading, .summary) {
is the same as 
.card .heading,
.card .summary

compound pseudo selector
.btn:is(:hover, :focus) {

General Sibling Selector (~)
The general sibling selector selects all elements that are next siblings of a specified element.
div ~ p {       ; selects all p tag inside div tags


/* }}} */
/* {{{ */ Variable

:root { --accent: #0fddad }     ; variable assignment
background-color: var(--accent) ; call the variable

/* }}} */
/* {{{ */ Sizing

height      ; the height of an alement
width       ; the width of an alement

/* }}} */
/* {{{ */ Margin

margin          ; margin area on all four sides of an element.
margin: 20px    ; 20px on (top, bottom, right left)

margin-bottom:      ; margin area on the bottom of an element
margin-bottom: 20px ; margin 20px below


/* }}} */
/* {{{ */ Padding

padding     ; Padding is used to create space around an element's content, inside of any defined borders.

padding-top         ; px pt cm % inherit
padding-right       ;
padding-bottom      ;
padding-left        ;

padding: 10px 20px 30px 40px    ; top right bottom left
padding: 10px 20px 40px         ; top (right left) bottom
padding: 10px 20px              ; (top bottom) (right left)
padding: 10px                   ; same all

/* }}} */
/* {{{ */ Color

/* {{{ */ Color Properties

background-color    ; sets the background color of an element

/* }}} */
/* {{{ */ Color Value

any color   ; red, green, blue, yellow, white, black
rgb()       ; rgba(255, 0, 0) full red, 0 green, 0 blue
rgba()      ; rgba(255, 0, 0, 0.5) full red, 0 green, 0 blue, alpha/opacity (0-1) decimal
#5CGG5D     ; hex color

/* }}} */
/* {{{ */ accent-color:

The accent-color CSS property sets the accent color for user-interface controls generated by some elements.

Browsers that support accent-color currently apply it to the following HTML elements:

Each user agent has an accent color, with variations to ensure legibility and contrast. That accent color is not used by every
user-interface control nor in every state of the control. The accent-color is only applied to user-interface controls that use
an accent color in the states where it is applicable.

/* Keyword values */
accent-color: auto;

/* <color> values */
accent-color: darkred;
accent-color: #5729e9;
accent-color: rgb(0 200 0);
accent-color: hsl(228 4% 24%);

/* Global values */
accent-color: inherit;
accent-color: initial;
accent-color: revert;
accent-color: revert-layer;
accent-color: unset;


/* }}} */

/* }}} */
/* {{{ */ Level Element

block   ; take up one block space, the next element will be placed below this element
e.g.    button div
inline  ; the next element will placed on the right side of this element

/* }}} */
/* {{{ */ Content

content:    ; replaced content with generated value

/* }}} */
/* {{{ */ text-wrap

text-wrap:  ; how text inside element is wrapped
text-wrap: wrap;        ; minimize overflow
text-wrap: nowrap;      ; Text does not wrap across lines. It will overflow its containing element rather than breaking onto a new line.
text-wrap: balance;     ; balance each line, computationally expensive 6-10 line
text-wrap: pretty;      ; same as wrap, better layout over speed
text-wrap: stable;


/* }}} */
/* {{{ */ text-align

text-align:     ; The text-align-last property specifies how to align the last line of a text.

text-align-last:    ; How to align last line of a text

auto    ; Default value. The last line is justified and aligned left                                                                Demo ❯
left    ; The last line is aligned to the left                                                                                      Demo ❯
right   ; The last line is aligned to the right                                                                                     Demo ❯
center  ; The last line is center-aligned                                                                                           Demo ❯
justify ; The last line is justified as the rest of the lines                                                                       Demo ❯
start   ; The last line is aligned at the beginning of the line (left if the text-direction is left-to-right, and right is the      Demo ❯ text-direction is right-to-left)
end     ; The last line is aligned at the end of the line (right if the text-direction is left-to-right, and left is the            Demo ❯ text-direction is right-to-left)
initial ; Sets this property to its default value. Read about initial
inherit ; Inherits this property from its parent element. Read about inherit


/* }}} */
/* {{{ */ opacity

opacity:    ; set the transparent level
opacity: 1  ; not transparent at all
opacity: .5 ; 50% transparent
opacity: 0  ; completely transparent
opacity: initial    ; sets to default value
opacity: inherit    ; inherit from parent value

avoid inheritance transparent with rgba
div.first {
  background: rgba(76, 175, 80, 0.1);
}
div.second {
  background: rgba(76, 175, 80, 0.3);
}
div.third {
  background: rgba(76, 175, 80, 0.6);
}


all child element becomes transparent as well, use rgba() to avoid this

/* }}} */
/* {{{ */ box-sizing

box-sizing:     ; include the padding and border in an element's total width and height.

box-sizing: border-box          ; border and padding becomes one number, OS if you put 'height' or 'width' It will appear as It should be
* { box-sizing: border-box }    ; to apply to all elements

/* }}} */
/* {{{ */ inset

inset:      ; distance between an element and the parent element
we need position specified to apply
inset: 10px;                       ; top right bottom left 10px
inset: 10px 20px;                  ; top bottom right left
inset: 10px 20px 30px;              ; top (bottom left) right
inset: 10px 20px 30px 40px;        ; top right bottom left

auto
length
%
initial
inherit

/* }}} */
/* {{{ */ position

positioning method for an element

static      ;
relative    ;
fixed       ;
absolute    ;
sticky      ;


/* }}} */
/* {{{ */ justify-content

justify-content ; distributes space between and around content

center          ; all the item to the center 1 ccc 1
space-around    ; gap value 1/2 c 1 c 1 c 1/2
space-between   ; gap value c 1 c 1 c
space-evenly    ; all the gap are the same size 1 c 1 c 1 c 1

/* }}} */
/* {{{ */ align-item

working on y-axis

center  ; center edge
start   ; start edge
end     ; end edge

/* }}} */
/* {{{ */ flex-direction

define the main axis and direction

row     ; default row wise
column  ; column wise

/* }}} */
/* {{{ */ overflow

The CSS overflow property controls what happens to content that is too big to fit into an area.

visible ; Default. The overflow is not clipped. The content renders outside the element's box
hidden  ; The overflow is clipped, and the rest of the content will be invisible
scroll  ; The overflow is clipped, and a scrollbar is added to see the rest of the content
auto    ; Similar to scroll, but it adds scrollbars only when necessary


/* }}} */
/* {{{ */ Pseudo-Classes :hover :focus

:hover  ; When user hover over the element
:focus  ; When user click the element

/* }}} */
/* {{{ */ aspect-ratio

aspect-ratio:   ; ratio between width and height of an element
If aspect-ratio and width properties are set, the height will follow in the defined aspect ratio.
aspect-ratio: number/number|initial|inherit;

number    ; First number specifies the number for width in aspect ratio.                                                
number    ; Second number specifies the number for height in aspect ratio. Optional. If not set, number for height is 1 as default.                                                                                                 
initial   ; Sets this property to its default value. Read about initial
inherit   ; Inherits this property from its parent element. Read about inherit



/* }}} */
/* {{{ */ text-decoration

text-decoration:    ; decoration added to text
underline   ; give the underline

/* }}} */
/* {{{ */ transform

The transform property applies a 2D or 3D transformation to an element. This
property allows you to rotate, scale, move, skew, etc., elements.

Value                                          Description                             
none                              Defines that there should be no transformation                     
matrix(n,n,n,n,n,n)               Defines a 2D transformation, using a matrix of six values          
matrix3d                          Defines a 3D transformation, using a 4x4 matrix of 16 values (n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n)
translate(x,y)                    Defines a 2D translation                                           
translate3d(x,y,z)                Defines a 3D translation
translateX(x)                     Defines a translation, using only the value for the X-axis
translateY(y)                     Defines a translation, using only the value for the Y-axis
translateZ(z)                     Defines a 3D translation, using only the value for the Z-axis
scale(x,y)                        Defines a 2D scale transformation                                  
scale3d(x,y,z)                    Defines a 3D scale transformation
scaleX(x)                         Defines a scale transformation by giving a value for the X-axis
scaleY(y)                         Defines a scale transformation by giving a value for the Y-axis
scaleZ(z)                         Defines a 3D scale transformation by giving a value for the Z-axis
rotate(angle)                     Defines a 2D rotation, the angle is specified in the parameter     
rotate3d(x,y,z,angle)             Defines a 3D rotation
rotateX(angle)                    Defines a 3D rotation along the X-axis                             
rotateY(angle)                    Defines a 3D rotation along the Y-axis                             
rotateZ(angle)                    Defines a 3D rotation along the Z-axis
skew(x-angle,y-angle)             Defines a 2D skew transformation along the X- and the Y-axis       
skewX(angle)                      Defines a 2D skew transformation along the X-axis                  
skewY(angle)                      Defines a 2D skew transformation along the Y-axis                  
perspective(n)                    Defines a perspective view for a 3D transformed element
initial                           set to default
inherit                           inherit from parent element


all     ; applied all the transform properties
2s      ; animation duration

translate   ; repositions an element in the horizontal and/or vertical directions
transform: translate(x,y)   ; horizontal, vertical
transform: translateX()     ; reposition an element horizontally (% or px)

/* }}} */
/* {{{ */ Inheritance

child element will follow all the attribute that the parent has
body { // will applied to all the element
font-family: "Roboto", sans-serif;
}

/* }}} */
/* {{{ */ Display

display:    ; How element shown on the page

block   ; starts on a new line
Examples of block-level elements:
• <div>
• <h1> - <h6>
• <p>
• <form>
• <header>
• <footer>
• <section>

inline  ; An inline element DOES NOT start on a new line and only takes up as much width as necessary.

Value                                                                              Description
inline             Displays an element as an inline element
block              Displays an element as a block element
contents           Makes the container disappear, making the child elements children of the element the next level up in the DOM
flex               Displays an element as a block-level flex container
grid               Displays an element as a block-level grid container
inline-block       Displays an element as an inline-level block container. The element itself is formatted as an inline element, but you can apply height and width values
inline-flex        Displays an element as an inline-level flex container
inline-grid        Displays an element as an inline-level grid container
inline-table       The element is displayed as an inline-level table
list-item          Let the element behave like a <li> element
run-in             Displays an element as either block or inline, depending on context
table              Let the element behave like a <table> element
table-caption      Let the element behave like a <caption> element
table-column-group Let the element behave like a <colgroup> element
table-header-group Let the element behave like a <thead> element
table-footer-group Let the element behave like a <tfoot> element
table-row-group    Let the element behave like a <tbody> element
table-cell         Let the element behave like a <td> element
table-column       Let the element behave like a <col> element
table-row          Let the element behave like a <tr> element
none               The element is completely removed
initial            Sets this property to its default value
inherit            Inherits this property from its parent element


flex    ; change to inline, next element will placed next to current element

/* }}} */
/* {{{ */ font

font-family: default, optional;

/* }}} */
/* {{{ */ units

rem     ; root em 1.5rem on p tag is 27 because p has height of 18px
vw      ; Viewport width, relative to width of the browser, if browser width = 1000px then 1vw would be 10px


/* }}} */
/* {{{ */ background

background-blend-mode:
normal
multiply
hard-light
difference

/* }}} */
/* {{{ */ media query

@media () {}    ; applied if the media query match the deface
@media (max-width: 500px) { applied if this is true
background-color: blue;
}

/* }}} */
/* {{{ */ scale

scale:  ; The scale property defines values for how much an element is scaled in x- and y-directions. You can also define how much an
element is scaled in z-direction.

scale: 2 50%;       ; two times width and half times height
scale: 2            ; two times width and height
scale: inherit
scale: initial


/* }}} */
/* {{{ */ function

/* {{{ */ color-mix()
    color-mix() ; takes two <color> values and returns the result of mixing them in a given colorspace by a given amount.

    div:nth-child(1) {
        /* background-color: color-mix(in srgb, red, yellow) /1* becomes orange *1/ */
        background-color: color-mix(in srgb, red 20%, yellow) /* yellow 80% meaning more onto yellow */
    }
div:nth-child(2) {
        background-color: color-mix(in srgb, var(--main-color), black 20%) /* darkening the color */
    }
div:nth-child(3) {
        background-color: color-mix(in srgb, var(--main-color), white 20%) /* darkening the color */
    }
div:nth-child(4) {
        background-color: color-mix(in srgb, var(--main-color), transparent 90%) /* transparenting the element */
    }
/* }}} */
/* clamp() *//* {{{ */

clamp(minimum, growing, maximum)    ; fluid typhography, avoid many @media query

minimum threshold. To achieve this we use clamp(1.8rem, 2.5vw, 2.8rem). The viewport-relative value is 2.5vw but it is clamped between
1.8rem and 2.8rem, so:

• if the calculated value of 2.5vw is less than 1.8rem, then 1.8rem will be used
• if the calculated value of 2.5vw is greater than 2.8rem, then 2.8rem will be used.

This prevents the heading text from getting too small in a very narrow window, or too big in a very wide window.


/* }}} */

/* }}} */
/* {{{ */ keyframes

@keyframes  ; rules animation initializathion (we need to call later on)

@keyframes animation_name {
0 % { /* beginning */
do this
}
100 % { /* end */
do that
}
}

@keyframes animation_name {
from { /* count as 0% */
}
to { /* count as 100% */
}
}

/* }}} */
/* {{{ */ border

border: border-size border-style border-color;

border-style: none;
border-style: hidden;
border-style: dotted;
border-style: dashed;
border-style: solid;
border-style: double;
border-style: groove;
border-style: ridge;
border-style: inset;
border-style: ouset;

/* }}} */

" scroll-behaviour ; property specifies whether to smoothly animate the scroll position, instead of a straight jump, When the user click on a link within scrollable box
" visibility ; property specifies whether or not an element is visible, hidden element take up space on the page. use the display property to both hide and remove element from the document
" display ; property specifies the display behaviour the type of rendering box of an element;
" max-width ; maximum width of an element, if the content is larger than the maximum width, It will automatically change the height of the element
" text-align ; property specifies the horizontal alignment of the text in an element
" initial ; sets this property to it's default value
" inherit ; inherit property from it's parent element
" float ; property is used for positioning and formatting content e.g. let an image float left tot the text in a container (left, fight, none,inherit)
" all ; resets all property, apart from Unicode-bidi and direction. to their initial or inherited value (initial ; changes all the properties applied to the elements or the elements parent to their initial value) (inherit ; changes all the properties applied to the element or the elements parent to their parent value) "unset ; changes all the properties applied to the element or the elements parent to their parent value if They rare inheritable or to their initial value if not"
" ::marker ; CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. works in <li> and <summary> elements
" text-overflow ; How overflowed content that is not displayed should be signaled to the user.
" grid-auto-columns; specifies the size of an implicitly-created grid column
" font-weight ; sets the weight (or boldness) of the font. depends on the font-family that is set

" fr ; fractional unit 1fr Is equal to part of the available space (perbandingan) if we set 1fr 1fr means that It will devide into 2 parts
