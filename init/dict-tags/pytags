!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/danzor/completion/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
AbstractSet	pyvscode.py	/^from collections.abc import Awaitable, Callable, Iterable, Iterator, MutableSet, Reversible, Set/;"	Y	nameref:unknown:Set
ArithmeticError	pyvscode.py	/^class ArithmeticError(Exception): ...$/;"	c
AssertionError	pyvscode.py	/^class AssertionError(Exception): ...$/;"	c
AttributeError	pyvscode.py	/^class AttributeError(Exception):$/;"	c
BaseException	pyvscode.py	/^class BaseException:$/;"	c
BaseExceptionGroup	pyvscode.py	/^    class BaseExceptionGroup(BaseException, Generic[_BaseExceptionT_co]):$/;"	c
BlockingIOError	pyvscode.py	/^class BlockingIOError(OSError):$/;"	c
BrokenPipeError	pyvscode.py	/^class BrokenPipeError(ConnectionError): ...$/;"	c
BufferError	pyvscode.py	/^class BufferError(Exception): ...$/;"	c
BytesWarning	pyvscode.py	/^class BytesWarning(Warning): ...$/;"	c
ChildProcessError	pyvscode.py	/^class ChildProcessError(OSError): ...$/;"	c
ConnectionAbortedError	pyvscode.py	/^class ConnectionAbortedError(ConnectionError): ...$/;"	c
ConnectionError	pyvscode.py	/^class ConnectionError(OSError): ...$/;"	c
ConnectionRefusedError	pyvscode.py	/^class ConnectionRefusedError(ConnectionError): ...$/;"	c
ConnectionResetError	pyvscode.py	/^class ConnectionResetError(ConnectionError): ...$/;"	c
DeprecationWarning	pyvscode.py	/^class DeprecationWarning(Warning): ...$/;"	c
EOFError	pyvscode.py	/^class EOFError(Exception): ...$/;"	c
EncodingWarning	pyvscode.py	/^    class EncodingWarning(Warning): ...$/;"	c
EnvironmentError	pyvscode.py	/^EnvironmentError = OSError$/;"	v
Exception	pyvscode.py	/^class Exception(BaseException): ...$/;"	c
ExceptionGroup	pyvscode.py	/^    class ExceptionGroup(BaseExceptionGroup[_ExceptionT_co], Exception):$/;"	c
FileExistsError	pyvscode.py	/^class FileExistsError(OSError): ...$/;"	c
FileNotFoundError	pyvscode.py	/^class FileNotFoundError(OSError): ...$/;"	c
FloatingPointError	pyvscode.py	/^class FloatingPointError(ArithmeticError): ...$/;"	c
FutureWarning	pyvscode.py	/^class FutureWarning(Warning): ...$/;"	c
GeneratorExit	pyvscode.py	/^class GeneratorExit(BaseException): ...$/;"	c
IOError	pyvscode.py	/^IOError = OSError$/;"	v
ImportError	pyvscode.py	/^class ImportError(Exception):$/;"	c
ImportWarning	pyvscode.py	/^class ImportWarning(Warning): ...$/;"	c
IndentationError	pyvscode.py	/^class IndentationError(SyntaxError): ...$/;"	c
IndexError	pyvscode.py	/^class IndexError(LookupError): ...$/;"	c
InterruptedError	pyvscode.py	/^class InterruptedError(OSError): ...$/;"	c
IsADirectoryError	pyvscode.py	/^class IsADirectoryError(OSError): ...$/;"	c
KeyError	pyvscode.py	/^class KeyError(LookupError): ...$/;"	c
KeyboardInterrupt	pyvscode.py	/^class KeyboardInterrupt(BaseException): ...$/;"	c
LookupError	pyvscode.py	/^class LookupError(Exception): ...$/;"	c
MemoryError	pyvscode.py	/^class MemoryError(Exception): ...$/;"	c
ModuleNotFoundError	pyvscode.py	/^class ModuleNotFoundError(ImportError): ...$/;"	c
NameError	pyvscode.py	/^class NameError(Exception):$/;"	c
NotADirectoryError	pyvscode.py	/^class NotADirectoryError(OSError): ...$/;"	c
NotImplementedError	pyvscode.py	/^class NotImplementedError(RuntimeError): ...$/;"	c
OSError	pyvscode.py	/^class OSError(Exception):$/;"	c
OverflowError	pyvscode.py	/^class OverflowError(ArithmeticError): ...$/;"	c
PendingDeprecationWarning	pyvscode.py	/^class PendingDeprecationWarning(Warning): ...$/;"	c
PermissionError	pyvscode.py	/^class PermissionError(OSError): ...$/;"	c
ProcessLookupError	pyvscode.py	/^class ProcessLookupError(OSError): ...$/;"	c
PythonFinalizationError	pyvscode.py	/^    class PythonFinalizationError(RuntimeError): ...$/;"	c
RecursionError	pyvscode.py	/^class RecursionError(RuntimeError): ...$/;"	c
ReferenceError	pyvscode.py	/^class ReferenceError(Exception): ...$/;"	c
ResourceWarning	pyvscode.py	/^class ResourceWarning(Warning): ...$/;"	c
RuntimeError	pyvscode.py	/^class RuntimeError(Exception): ...$/;"	c
RuntimeWarning	pyvscode.py	/^class RuntimeWarning(Warning): ...$/;"	c
StopAsyncIteration	pyvscode.py	/^class StopAsyncIteration(Exception):$/;"	c
StopIteration	pyvscode.py	/^class StopIteration(Exception):$/;"	c
SyntaxError	pyvscode.py	/^class SyntaxError(Exception):$/;"	c
SyntaxWarning	pyvscode.py	/^class SyntaxWarning(Warning): ...$/;"	c
SystemError	pyvscode.py	/^class SystemError(Exception): ...$/;"	c
SystemExit	pyvscode.py	/^class SystemExit(BaseException):$/;"	c
TabError	pyvscode.py	/^class TabError(IndentationError): ...$/;"	c
TimeoutError	pyvscode.py	/^class TimeoutError(OSError): ...$/;"	c
TypeError	pyvscode.py	/^class TypeError(Exception): ...$/;"	c
UnboundLocalError	pyvscode.py	/^class UnboundLocalError(NameError): ...$/;"	c
UnicodeDecodeError	pyvscode.py	/^class UnicodeDecodeError(UnicodeError):$/;"	c
UnicodeEncodeError	pyvscode.py	/^class UnicodeEncodeError(UnicodeError):$/;"	c
UnicodeError	pyvscode.py	/^class UnicodeError(ValueError): ...$/;"	c
UnicodeTranslateError	pyvscode.py	/^class UnicodeTranslateError(UnicodeError):$/;"	c
UnicodeWarning	pyvscode.py	/^class UnicodeWarning(Warning): ...$/;"	c
UserWarning	pyvscode.py	/^class UserWarning(Warning): ...$/;"	c
ValueError	pyvscode.py	/^class ValueError(Exception): ...$/;"	c
Warning	pyvscode.py	/^class Warning(Exception): ...$/;"	c
WindowsError	pyvscode.py	/^    WindowsError = OSError$/;"	v
ZeroDivisionError	pyvscode.py	/^class ZeroDivisionError(ArithmeticError): ...$/;"	c
_AddableT1	pyvscode.py	/^_AddableT1 = TypeVar("_AddableT1", bound=SupportsAdd[Any, Any])$/;"	v
_AddableT2	pyvscode.py	/^_AddableT2 = TypeVar("_AddableT2", bound=SupportsAdd[Any, Any])$/;"	v
_AwaitableT	pyvscode.py	/^_AwaitableT = TypeVar("_AwaitableT", bound=Awaitable[Any])$/;"	v
_AwaitableT_co	pyvscode.py	/^_AwaitableT_co = TypeVar("_AwaitableT_co", bound=Awaitable[Any], covariant=True)$/;"	v
_BaseExceptionT	pyvscode.py	/^    _BaseExceptionT = TypeVar("_BaseExceptionT", bound=BaseException)$/;"	v
_BaseExceptionT_co	pyvscode.py	/^    _BaseExceptionT_co = TypeVar("_BaseExceptionT_co", bound=BaseException, covariant=True, defa/;"	v
_ClassInfo	pyvscode.py	/^    _ClassInfo: TypeAlias = type | tuple[_ClassInfo, ...]$/;"	v	typeref:typename:TypeAlias
_ClassInfo	pyvscode.py	/^    _ClassInfo: TypeAlias = type | types.UnionType | tuple[_ClassInfo, ...]$/;"	v	typeref:typename:TypeAlias
_E	pyvscode.py	/^_E = TypeVar("_E", contravariant=True)$/;"	v
_ExceptionT	pyvscode.py	/^    _ExceptionT = TypeVar("_ExceptionT", bound=Exception)$/;"	v
_ExceptionT_co	pyvscode.py	/^    _ExceptionT_co = TypeVar("_ExceptionT_co", bound=Exception, covariant=True, default=Exceptio/;"	v
_FormatMapMapping	pyvscode.py	/^class _FormatMapMapping(Protocol):$/;"	c
_GetItemIterable	pyvscode.py	/^class _GetItemIterable(Protocol[_T_co]):$/;"	c
_I	pyvscode.py	/^_I = TypeVar("_I", default=int)$/;"	v
_IntegerFormats	pyvscode.py	/^_IntegerFormats: TypeAlias = Literal[$/;"	v	typeref:typename:TypeAlias
_KT	pyvscode.py	/^_KT = TypeVar("_KT")$/;"	v
_LiteralInteger	pyvscode.py	/^_LiteralInteger = _PositiveInteger | _NegativeInteger | Literal[0]  # noqa: Y026  # TODO: Use Ty/;"	v
_M	pyvscode.py	/^_M = TypeVar("_M", contravariant=True)$/;"	v
_NegativeInteger	pyvscode.py	/^_NegativeInteger: TypeAlias = Literal[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -1/;"	v	typeref:typename:TypeAlias
_NotImplementedType	pyvscode.py	/^class _NotImplementedType(Any):$/;"	c
_Opener	pyvscode.py	/^_Opener: TypeAlias = Callable[[str, int], int]$/;"	v	typeref:typename:TypeAlias
_P	pyvscode.py	/^_P = ParamSpec("_P")$/;"	v
_PathLike	pyvscode.py	/^class _PathLike(Protocol[AnyStr_co]):$/;"	c
_PositiveInteger	pyvscode.py	/^_PositiveInteger: TypeAlias = Literal[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,/;"	v	typeref:typename:TypeAlias
_R_co	pyvscode.py	/^_R_co = TypeVar("_R_co", covariant=True)$/;"	v
_S	pyvscode.py	/^_S = TypeVar("_S")$/;"	v
_SupportsAnextT	pyvscode.py	/^_SupportsAnextT = TypeVar("_SupportsAnextT", bound=SupportsAnext[Any], covariant=True)$/;"	v
_SupportsNextT	pyvscode.py	/^_SupportsNextT = TypeVar("_SupportsNextT", bound=SupportsNext[Any], covariant=True)$/;"	v
_SupportsPow2	pyvscode.py	/^class _SupportsPow2(Protocol[_E, _T_co]):$/;"	c
_SupportsPow3	pyvscode.py	/^class _SupportsPow3(Protocol[_E, _M, _T_co]):$/;"	c
_SupportsPow3NoneOnly	pyvscode.py	/^class _SupportsPow3NoneOnly(Protocol[_E, _T_co]):$/;"	c
_SupportsRound1	pyvscode.py	/^class _SupportsRound1(Protocol[_T_co]):$/;"	c
_SupportsRound2	pyvscode.py	/^class _SupportsRound2(Protocol[_T_co]):$/;"	c
_SupportsSomeKindOfPow	pyvscode.py	/^_SupportsSomeKindOfPow = (  # noqa: Y026  # TODO: Use TypeAlias once mypy bugs are fixed$/;"	v
_SupportsSumNoDefaultT	pyvscode.py	/^_SupportsSumNoDefaultT = TypeVar("_SupportsSumNoDefaultT", bound=_SupportsSumWithNoDefaultGiven)$/;"	v
_SupportsSumWithNoDefaultGiven	pyvscode.py	/^class _SupportsSumWithNoDefaultGiven(SupportsAdd[Any, Any], SupportsRAdd[int, Any], Protocol): ./;"	c
_SupportsSynchronousAnext	pyvscode.py	/^    class _SupportsSynchronousAnext(Protocol[_AwaitableT_co]):$/;"	c
_SupportsWriteAndFlush	pyvscode.py	/^class _SupportsWriteAndFlush(SupportsWrite[_T_contra], SupportsFlush, Protocol[_T_contra]): ...$/;"	c
_T	pyvscode.py	/^_T = TypeVar("_T")$/;"	v
_T1	pyvscode.py	/^_T1 = TypeVar("_T1")$/;"	v
_T2	pyvscode.py	/^_T2 = TypeVar("_T2")$/;"	v
_T3	pyvscode.py	/^_T3 = TypeVar("_T3")$/;"	v
_T4	pyvscode.py	/^_T4 = TypeVar("_T4")$/;"	v
_T5	pyvscode.py	/^_T5 = TypeVar("_T5")$/;"	v
_T_co	pyvscode.py	/^_T_co = TypeVar("_T_co", covariant=True)$/;"	v
_T_contra	pyvscode.py	/^_T_contra = TypeVar("_T_contra", contravariant=True)$/;"	v
_TranslateTable	pyvscode.py	/^class _TranslateTable(Protocol):$/;"	c
_VT	pyvscode.py	/^_VT = TypeVar("_VT")$/;"	v
__abs__	pyvscode.py	/^    def __abs__(self) -> float: ...$/;"	m	class:complex	typeref:typename:float
__abs__	pyvscode.py	/^    def __abs__(self) -> float: ...$/;"	m	class:float	typeref:typename:float
__abs__	pyvscode.py	/^    def __abs__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__add__	pyvscode.py	/^    def __add__(self, value: ReadableBuffer, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
__add__	pyvscode.py	/^    def __add__(self, value: ReadableBuffer, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__add__	pyvscode.py	/^    def __add__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__add__	pyvscode.py	/^    def __add__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__add__	pyvscode.py	/^    def __add__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__add__	pyvscode.py	/^    def __add__(self, value: list[_S], \/) -> list[_S | _T]: ...$/;"	m	class:list	typeref:typename:list[_S|_T]
__add__	pyvscode.py	/^    def __add__(self, value: list[_T], \/) -> list[_T]: ...$/;"	m	class:list	typeref:typename:list[_T]
__add__	pyvscode.py	/^    def __add__(self, value: str, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
__add__	pyvscode.py	/^    def __add__(self, value: tuple[_T, ...], \/) -> tuple[_T_co | _T, ...]: ...$/;"	m	class:tuple	typeref:typename:tuple[_T_co|_T,...]
__add__	pyvscode.py	/^    def __add__(self, value: tuple[_T_co, ...], \/) -> tuple[_T_co, ...]: ...$/;"	m	class:tuple	typeref:typename:tuple[_T_co,...]
__add__	pyvscode.py	/^    def __add__(self: LiteralString, value: LiteralString, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
__alloc__	pyvscode.py	/^    def __alloc__(self) -> int: ...$/;"	m	class:bytearray	typeref:typename:int
__and__	pyvscode.py	/^    def __and__(self, value: AbstractSet[_T_co], \/) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
__and__	pyvscode.py	/^    def __and__(self, value: AbstractSet[object], \/) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
__and__	pyvscode.py	/^    def __and__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__and__	pyvscode.py	/^    def __and__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__and__	pyvscode.py	/^    def __and__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__anext__	pyvscode.py	/^        def __anext__(self) -> _AwaitableT_co: ...$/;"	m	class:_SupportsSynchronousAnext	typeref:typename:_AwaitableT_co
__base__	pyvscode.py	/^    def __base__(self) -> type | None: ...$/;"	m	class:type	typeref:typename:type|None
__basicsize__	pyvscode.py	/^    def __basicsize__(self) -> int: ...$/;"	m	class:type	typeref:typename:int
__bool__	pyvscode.py	/^    def __bool__(self) -> bool: ...$/;"	m	class:complex	typeref:typename:bool
__bool__	pyvscode.py	/^    def __bool__(self) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__bool__	pyvscode.py	/^    def __bool__(self) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__buffer__	pyvscode.py	/^    def __buffer__(self, flags: int, \/) -> memoryview: ...$/;"	m	class:bytearray	typeref:typename:memoryview
__buffer__	pyvscode.py	/^    def __buffer__(self, flags: int, \/) -> memoryview: ...$/;"	m	class:bytes	typeref:typename:memoryview
__buffer__	pyvscode.py	/^    def __buffer__(self, flags: int, \/) -> memoryview: ...$/;"	m	class:memoryview	typeref:typename:memoryview
__build_class__	pyvscode.py	/^def __build_class__(func: Callable[[], CellType | Any], name: str, \/, *bases: Any, metaclass: A/;"	f	typeref:typename:Any
__builtins__	pyvscode.py	/^        def __builtins__(self) -> dict[str, Any]: ...$/;"	m	class:function	typeref:typename:dict[str,Any]
__bytes__	pyvscode.py	/^        def __bytes__(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__call__	pyvscode.py	/^        def __call__(self, *args: _P.args, **kwargs: _P.kwargs) -> _R_co: ...$/;"	m	class:staticmethod	typeref:typename:_R_co
__call__	pyvscode.py	/^    def __call__(self, *args: Any, **kwds: Any) -> Any: ...$/;"	m	class:type	typeref:typename:Any
__ceil__	pyvscode.py	/^        def __ceil__(self) -> int: ...$/;"	m	class:float	typeref:typename:int
__ceil__	pyvscode.py	/^    def __ceil__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__class__	pyvscode.py	/^    def __class__(self) -> type[Self]: ...$/;"	m	class:object	typeref:typename:type[Self]
__class__	pyvscode.py	/^    def __class__(self, type: type[object], \/) -> None: ...$/;"	m	class:object	typeref:typename:None
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:BaseExceptionGroup	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:dict	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:enumerate	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:frozenset	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:list	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:set	typeref:typename:GenericAlias
__class_getitem__	pyvscode.py	/^        def __class_getitem__(cls, item: Any, \/) -> GenericAlias: ...$/;"	m	class:tuple	typeref:typename:GenericAlias
__closure__	pyvscode.py	/^    def __closure__(self) -> tuple[CellType, ...] | None: ...$/;"	m	class:function	typeref:typename:tuple[CellType,...]|None
__complex__	pyvscode.py	/^        def __complex__(self) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__contains__	pyvscode.py	/^    def __contains__(self, key: SupportsIndex | ReadableBuffer, \/) -> bool: ...  # type: ignore/;"	m	class:bytearray	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, key: SupportsIndex | ReadableBuffer, \/) -> bool: ...  # type: ignore/;"	m	class:bytes	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, key: object, \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, key: object, \/) -> bool: ...$/;"	m	class:range	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, key: object, \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, key: str, \/) -> bool: ...  # type: ignore[override]$/;"	m	class:str	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, o: object, \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, o: object, \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__contains__	pyvscode.py	/^    def __contains__(self, x: object, \/) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
__delattr__	pyvscode.py	/^    def __delattr__(self, name: str, \/) -> None: ...$/;"	m	class:object	typeref:typename:None
__delete__	pyvscode.py	/^    def __delete__(self, instance: Any, \/) -> None: ...$/;"	m	class:property	typeref:typename:None
__delitem__	pyvscode.py	/^    def __delitem__(self, key: SupportsIndex | slice, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__delitem__	pyvscode.py	/^    def __delitem__(self, key: SupportsIndex | slice, \/) -> None: ...$/;"	m	class:list	typeref:typename:None
__delitem__	pyvscode.py	/^    def __delitem__(self, key: _KT, \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__dict__	pyvscode.py	/^    def __dict__(self) -> types.MappingProxyType[str, Any]: ...  # type: ignore[override]$/;"	m	class:type	typeref:typename:types.MappingProxyType[str,Any]
__dictoffset__	pyvscode.py	/^    def __dictoffset__(self) -> int: ...$/;"	m	class:type	typeref:typename:int
__dir__	pyvscode.py	/^    def __dir__(self) -> Iterable[str]: ...$/;"	m	class:object	typeref:typename:Iterable[str]
__divmod__	pyvscode.py	/^    def __divmod__(self, value: float, \/) -> tuple[float, float]: ...$/;"	m	class:float	typeref:typename:tuple[float,float]
__divmod__	pyvscode.py	/^    def __divmod__(self, value: int, \/) -> tuple[int, int]: ...$/;"	m	class:int	typeref:typename:tuple[int,int]
__enter__	pyvscode.py	/^    def __enter__(self) -> Self: ...$/;"	m	class:memoryview	typeref:typename:Self
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:complex	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:dict	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:object	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:range	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:slice	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__eq__	pyvscode.py	/^    def __eq__(self, value: object, \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__exit__	pyvscode.py	/^    def __exit__($/;"	m	class:memoryview	typeref:typename:None
__flags__	pyvscode.py	/^    def __flags__(self) -> int: ...$/;"	m	class:type	typeref:typename:int
__float__	pyvscode.py	/^    def __float__(self) -> float: ...$/;"	m	class:float	typeref:typename:float
__float__	pyvscode.py	/^    def __float__(self) -> float: ...$/;"	m	class:int	typeref:typename:float
__floor__	pyvscode.py	/^        def __floor__(self) -> int: ...$/;"	m	class:float	typeref:typename:int
__floor__	pyvscode.py	/^    def __floor__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__floordiv__	pyvscode.py	/^    def __floordiv__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__floordiv__	pyvscode.py	/^    def __floordiv__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__format__	pyvscode.py	/^    def __format__(self, format_spec: str, \/) -> str: ...$/;"	m	class:object	typeref:typename:str
__fspath__	pyvscode.py	/^    def __fspath__(self) -> AnyStr_co: ...$/;"	m	class:_PathLike	typeref:typename:AnyStr_co
__func__	pyvscode.py	/^    def __func__(self) -> Callable[Concatenate[type[_T], _P], _R_co]: ...$/;"	m	class:classmethod	typeref:typename:Callable[Concatenate[type[_T],_P],_R_co]
__func__	pyvscode.py	/^    def __func__(self) -> Callable[_P, _R_co]: ...$/;"	m	class:staticmethod	typeref:typename:Callable[_P,_R_co]
__ge__	pyvscode.py	/^    def __ge__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: ReadableBuffer, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: bytes, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: float, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: int, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: list[_T], \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: str, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__ge__	pyvscode.py	/^    def __ge__(self, value: tuple[_T_co, ...], \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__get__	pyvscode.py	/^    def __get__(self, instance: Any, owner: type | None = None, \/) -> Any: ...$/;"	m	class:property	typeref:typename:Any
__get__	pyvscode.py	/^    def __get__(self, instance: None, owner: type, \/) -> Callable[_P, _R_co]: ...$/;"	m	class:staticmethod	typeref:typename:Callable[_P,_R_co]
__get__	pyvscode.py	/^    def __get__(self, instance: None, owner: type[_T], \/) -> Callable[_P, _R_co]: ...$/;"	m	class:classmethod	typeref:typename:Callable[_P,_R_co]
__get__	pyvscode.py	/^    def __get__(self, instance: _T, owner: type[_T] | None = None, \/) -> Callable[_P, _R_co]: ./;"	m	class:classmethod	typeref:typename:Callable[_P,_R_co]
__get__	pyvscode.py	/^    def __get__(self, instance: _T, owner: type[_T] | None = None, \/) -> Callable[_P, _R_co]: ./;"	m	class:staticmethod	typeref:typename:Callable[_P,_R_co]
__get__	pyvscode.py	/^    def __get__(self, instance: object, owner: type | None = None, \/) -> Any: ...$/;"	m	class:function	typeref:typename:Any
__getattribute__	pyvscode.py	/^    def __getattribute__(self, name: str, \/) -> Any: ...$/;"	m	class:object	typeref:typename:Any
__getitem__	pyvscode.py	/^    def __getitem__(self, i: SupportsIndex, \/) -> _T: ...$/;"	m	class:list	typeref:typename:_T
__getitem__	pyvscode.py	/^    def __getitem__(self, i: int, \/) -> _T_co: ...$/;"	m	class:_GetItemIterable	typeref:typename:_T_co
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex | slice, \/) -> str: ...$/;"	m	class:str	typeref:typename:str
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex | tuple[SupportsIndex, ...], \/) -> _I: ...$/;"	m	class:memoryview	typeref:typename:_I
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex, \/) -> _T_co: ...$/;"	m	class:tuple	typeref:typename:_T_co
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex, \/) -> int: ...$/;"	m	class:bytearray	typeref:typename:int
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex, \/) -> int: ...$/;"	m	class:bytes	typeref:typename:int
__getitem__	pyvscode.py	/^    def __getitem__(self, key: SupportsIndex, \/) -> int: ...$/;"	m	class:range	typeref:typename:int
__getitem__	pyvscode.py	/^    def __getitem__(self, key: _KT, \/) -> _VT: ...$/;"	m	class:dict	typeref:typename:_VT
__getitem__	pyvscode.py	/^    def __getitem__(self, key: int, \/) -> str | int | None: ...$/;"	m	class:_TranslateTable	typeref:typename:str|int|None
__getitem__	pyvscode.py	/^    def __getitem__(self, key: slice, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
__getitem__	pyvscode.py	/^    def __getitem__(self, key: slice, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__getitem__	pyvscode.py	/^    def __getitem__(self, key: slice, \/) -> memoryview[_I]: ...$/;"	m	class:memoryview	typeref:typename:memoryview[_I]
__getitem__	pyvscode.py	/^    def __getitem__(self, key: slice, \/) -> range: ...$/;"	m	class:range	typeref:typename:range
__getitem__	pyvscode.py	/^    def __getitem__(self, key: slice, \/) -> tuple[_T_co, ...]: ...$/;"	m	class:tuple	typeref:typename:tuple[_T_co,...]
__getitem__	pyvscode.py	/^    def __getitem__(self, key: str, \/) -> Any: ...$/;"	m	class:_FormatMapMapping	typeref:typename:Any
__getitem__	pyvscode.py	/^    def __getitem__(self, s: slice, \/) -> list[_T]: ...$/;"	m	class:list	typeref:typename:list[_T]
__getnewargs__	pyvscode.py	/^    def __getnewargs__(self) -> tuple[bytes]: ...$/;"	m	class:bytes	typeref:typename:tuple[bytes]
__getnewargs__	pyvscode.py	/^    def __getnewargs__(self) -> tuple[float]: ...$/;"	m	class:float	typeref:typename:tuple[float]
__getnewargs__	pyvscode.py	/^    def __getnewargs__(self) -> tuple[int]: ...$/;"	m	class:bool	typeref:typename:tuple[int]
__getnewargs__	pyvscode.py	/^    def __getnewargs__(self) -> tuple[int]: ...$/;"	m	class:int	typeref:typename:tuple[int]
__getnewargs__	pyvscode.py	/^    def __getnewargs__(self) -> tuple[str]: ...$/;"	m	class:str	typeref:typename:tuple[str]
__getstate__	pyvscode.py	/^        def __getstate__(self) -> object: ...$/;"	m	class:object	typeref:typename:object
__globals__	pyvscode.py	/^    def __globals__(self) -> dict[str, Any]: ...$/;"	m	class:function	typeref:typename:dict[str,Any]
__gt__	pyvscode.py	/^    def __gt__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: ReadableBuffer, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: bytes, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: float, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: int, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: list[_T], \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: str, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__gt__	pyvscode.py	/^    def __gt__(self, value: tuple[_T_co, ...], \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:bytes	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:complex	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:float	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:frozenset	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:memoryview	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:object	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:range	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:str	typeref:typename:int
__hash__	pyvscode.py	/^    def __hash__(self) -> int: ...$/;"	m	class:tuple	typeref:typename:int
__iadd__	pyvscode.py	/^    def __iadd__(self, value: Iterable[_T], \/) -> Self: ...  # type: ignore[misc]$/;"	m	class:list	typeref:typename:Self
__iadd__	pyvscode.py	/^    def __iadd__(self, value: ReadableBuffer, \/) -> Self: ...  # type: ignore[override]$/;"	m	class:bytearray	typeref:typename:Self
__iand__	pyvscode.py	/^    def __iand__(self, value: AbstractSet[object], \/) -> Self: ...$/;"	m	class:set	typeref:typename:Self
__import__	pyvscode.py	/^def __import__($/;"	f	typeref:typename:types.ModuleType
__imul__	pyvscode.py	/^    def __imul__(self, value: SupportsIndex, \/) -> Self: ...$/;"	m	class:bytearray	typeref:typename:Self
__imul__	pyvscode.py	/^    def __imul__(self, value: SupportsIndex, \/) -> Self: ...$/;"	m	class:list	typeref:typename:Self
__index__	pyvscode.py	/^    def __index__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__init__	pyvscode.py	/^        def __init__(self, *args: object, name: str | None = ...) -> None: ...$/;"	m	class:NameError	typeref:typename:None
__init__	pyvscode.py	/^        def __init__(self, *args: object, name: str | None = ..., obj: object = ...) -> None: ../;"	m	class:AttributeError	typeref:typename:None
__init__	pyvscode.py	/^        def __init__(self, message: str, exceptions: Sequence[_BaseExceptionT_co], \/) -> None: /;"	m	class:BaseExceptionGroup	typeref:typename:None
__init__	pyvscode.py	/^        def __init__(self, message: str, exceptions: Sequence[_ExceptionT_co], \/) -> None: ...$/;"	m	class:ExceptionGroup	typeref:typename:None
__init__	pyvscode.py	/^    def __init__($/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__($/;"	m	class:property	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:list	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:object	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:set	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self) -> None: ...$/;"	m	class:super	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, *args: object) -> None: ...$/;"	m	class:BaseException	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, *args: object, name: str | None = ..., path: str | None = ...) -> None: ./;"	m	class:ImportError	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, encoding: str, object: ReadableBuffer, start: int, end: int, reason: str,/;"	m	class:UnicodeDecodeError	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, encoding: str, object: str, start: int, end: int, reason: str, \/) -> Non/;"	m	class:UnicodeEncodeError	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, f: Callable[Concatenate[type[_T], _P], _R_co], \/) -> None: ...$/;"	m	class:classmethod	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, f: Callable[_P, _R_co], \/) -> None: ...$/;"	m	class:staticmethod	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, ints: Iterable[SupportsIndex] | SupportsIndex | ReadableBuffer, \/) -> No/;"	m	class:bytearray	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, iterable: Iterable[_T], \/) -> None: ...$/;"	m	class:list	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, iterable: Iterable[_T], \/) -> None: ...$/;"	m	class:set	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, iterable: Iterable[tuple[_KT, _VT]], \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, map: SupportsKeysAndGetItem[_KT, _VT], \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, name: str, bases: tuple[type, ...], dict: dict[str, Any], \/, **kwds: Any/;"	m	class:type	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, o: object, \/) -> None: ...$/;"	m	class:type	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, object: str, start: int, end: int, reason: str, \/) -> None: ...$/;"	m	class:UnicodeTranslateError	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, string: str, \/, encoding: str, errors: str = ...) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, t: Any, \/) -> None: ...$/;"	m	class:super	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self, t: Any, obj: Any, \/) -> None: ...$/;"	m	class:super	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self: dict[bytes, bytes], iterable: Iterable[list[bytes]], \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self: dict[str, _VT], **kwargs: _VT) -> None: ...  # pyright: ignore[reportInva/;"	m	class:dict	typeref:typename:None
__init__	pyvscode.py	/^    def __init__(self: dict[str, str], iterable: Iterable[list[str]], \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__init_subclass__	pyvscode.py	/^    def __init_subclass__(cls) -> None: ...$/;"	m	class:object	typeref:typename:None
__instancecheck__	pyvscode.py	/^    def __instancecheck__(self, instance: Any, \/) -> bool: ...$/;"	m	class:type	typeref:typename:bool
__int__	pyvscode.py	/^    def __int__(self) -> int: ...$/;"	m	class:float	typeref:typename:int
__int__	pyvscode.py	/^    def __int__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__invert__	pyvscode.py	/^    def __invert__(self) -> int: ...$/;"	m	class:bool	typeref:typename:int
__invert__	pyvscode.py	/^    def __invert__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__ior__	pyvscode.py	/^        def __ior__(self, value: Iterable[tuple[_KT, _VT]], \/) -> Self: ...$/;"	m	class:dict	typeref:typename:Self
__ior__	pyvscode.py	/^        def __ior__(self, value: SupportsKeysAndGetItem[_KT, _VT], \/) -> Self: ...$/;"	m	class:dict	typeref:typename:Self
__ior__	pyvscode.py	/^    def __ior__(self, value: AbstractSet[_T], \/) -> Self: ...  # type: ignore[override,misc]$/;"	m	class:set	typeref:typename:Self
__isabstractmethod__	pyvscode.py	/^    def __isabstractmethod__(self) -> bool: ...$/;"	m	class:classmethod	typeref:typename:bool
__isabstractmethod__	pyvscode.py	/^    def __isabstractmethod__(self) -> bool: ...$/;"	m	class:staticmethod	typeref:typename:bool
__isub__	pyvscode.py	/^    def __isub__(self, value: AbstractSet[object], \/) -> Self: ...$/;"	m	class:set	typeref:typename:Self
__itemsize__	pyvscode.py	/^    def __itemsize__(self) -> int: ...$/;"	m	class:type	typeref:typename:int
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_I]: ...$/;"	m	class:memoryview	typeref:typename:Iterator[_I]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_KT]: ...$/;"	m	class:dict	typeref:typename:Iterator[_KT]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_T]: ...$/;"	m	class:list	typeref:typename:Iterator[_T]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_T]: ...$/;"	m	class:set	typeref:typename:Iterator[_T]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:Iterator[_T_co]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[_T_co]: ...$/;"	m	class:tuple	typeref:typename:Iterator[_T_co]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[int]: ...$/;"	m	class:bytearray	typeref:typename:Iterator[int]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[int]: ...$/;"	m	class:bytes	typeref:typename:Iterator[int]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[int]: ...$/;"	m	class:range	typeref:typename:Iterator[int]
__iter__	pyvscode.py	/^    def __iter__(self) -> Iterator[str]: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:Iterator[str]
__iter__	pyvscode.py	/^    def __iter__(self) -> Self: ...$/;"	m	class:enumerate	typeref:typename:Self
__iter__	pyvscode.py	/^    def __iter__(self) -> Self: ...$/;"	m	class:filter	typeref:typename:Self
__iter__	pyvscode.py	/^    def __iter__(self) -> Self: ...$/;"	m	class:map	typeref:typename:Self
__iter__	pyvscode.py	/^    def __iter__(self) -> Self: ...$/;"	m	class:reversed	typeref:typename:Self
__iter__	pyvscode.py	/^    def __iter__(self) -> Self: ...$/;"	m	class:zip	typeref:typename:Self
__iter__	pyvscode.py	/^    def __iter__(self: LiteralString) -> Iterator[LiteralString]: ...$/;"	m	class:str	typeref:typename:Iterator[LiteralString]
__ixor__	pyvscode.py	/^    def __ixor__(self, value: AbstractSet[_T], \/) -> Self: ...  # type: ignore[override,misc]$/;"	m	class:set	typeref:typename:Self
__le__	pyvscode.py	/^    def __le__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: ReadableBuffer, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: bytes, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: float, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: int, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: list[_T], \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: str, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__le__	pyvscode.py	/^    def __le__(self, value: tuple[_T_co, ...], \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:bytearray	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:bytes	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:dict	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:frozenset	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:list	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:memoryview	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:range	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:set	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:str	typeref:typename:int
__len__	pyvscode.py	/^    def __len__(self) -> int: ...$/;"	m	class:tuple	typeref:typename:int
__length_hint__	pyvscode.py	/^    def __length_hint__(self) -> int: ...$/;"	m	class:reversed	typeref:typename:int
__lshift__	pyvscode.py	/^    def __lshift__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__lt__	pyvscode.py	/^    def __lt__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: AbstractSet[object], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: ReadableBuffer, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: bytes, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: float, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: int, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: list[_T], \/) -> bool: ...$/;"	m	class:list	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: str, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__lt__	pyvscode.py	/^    def __lt__(self, value: tuple[_T_co, ...], \/) -> bool: ...$/;"	m	class:tuple	typeref:typename:bool
__mod__	pyvscode.py	/^    def __mod__(self, value: Any, \/) -> bytes: ...$/;"	m	class:bytearray	typeref:typename:bytes
__mod__	pyvscode.py	/^    def __mod__(self, value: Any, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__mod__	pyvscode.py	/^    def __mod__(self, value: Any, \/) -> str: ...$/;"	m	class:str	typeref:typename:str
__mod__	pyvscode.py	/^    def __mod__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__mod__	pyvscode.py	/^    def __mod__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__mod__	pyvscode.py	/^    def __mod__(self: LiteralString, value: LiteralString | tuple[LiteralString, ...], \/) -> Li/;"	m	class:str	typeref:typename:LiteralString
__mro__	pyvscode.py	/^    def __mro__(self) -> tuple[type, ...]: ...$/;"	m	class:type	typeref:typename:tuple[type,...]
__mul__	pyvscode.py	/^    def __mul__(self, value: SupportsIndex, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
__mul__	pyvscode.py	/^    def __mul__(self, value: SupportsIndex, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__mul__	pyvscode.py	/^    def __mul__(self, value: SupportsIndex, \/) -> list[_T]: ...$/;"	m	class:list	typeref:typename:list[_T]
__mul__	pyvscode.py	/^    def __mul__(self, value: SupportsIndex, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
__mul__	pyvscode.py	/^    def __mul__(self, value: SupportsIndex, \/) -> tuple[_T_co, ...]: ...$/;"	m	class:tuple	typeref:typename:tuple[_T_co,...]
__mul__	pyvscode.py	/^    def __mul__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__mul__	pyvscode.py	/^    def __mul__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__mul__	pyvscode.py	/^    def __mul__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__mul__	pyvscode.py	/^    def __mul__(self: LiteralString, value: SupportsIndex, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:complex	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:float	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:int	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:object	typeref:typename:bool
__ne__	pyvscode.py	/^    def __ne__(self, value: object, \/) -> bool: ...$/;"	m	class:str	typeref:typename:bool
__neg__	pyvscode.py	/^    def __neg__(self) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__neg__	pyvscode.py	/^    def __neg__(self) -> float: ...$/;"	m	class:float	typeref:typename:float
__neg__	pyvscode.py	/^    def __neg__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__new__	pyvscode.py	/^        def __new__($/;"	m	class:zip	typeref:typename:zip[tuple[Any,...]]
__new__	pyvscode.py	/^        def __new__($/;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2,_T3,_T4,_T5]]
__new__	pyvscode.py	/^        def __new__($/;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2,_T3,_T4]]
__new__	pyvscode.py	/^        def __new__($/;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2,_T3]]
__new__	pyvscode.py	/^        def __new__(cls) -> zip[Any]: ...$/;"	m	class:zip	typeref:typename:zip[Any]
__new__	pyvscode.py	/^        def __new__(cls, *, strict: bool = ...) -> zip[Any]: ...$/;"	m	class:zip	typeref:typename:zip[Any]
__new__	pyvscode.py	/^        def __new__(cls, iter1: Iterable[_T1], \/) -> zip[tuple[_T1]]: ...$/;"	m	class:zip	typeref:typename:zip[tuple[_T1]]
__new__	pyvscode.py	/^        def __new__(cls, iter1: Iterable[_T1], \/, *, strict: bool = ...) -> zip[tuple[_T1]]: ../;"	m	class:zip	typeref:typename:zip[tuple[_T1]]
__new__	pyvscode.py	/^        def __new__(cls, iter1: Iterable[_T1], iter2: Iterable[_T2], \/) -> zip[tuple[_T1, _T2]]/;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2]]
__new__	pyvscode.py	/^        def __new__(cls, iter1: Iterable[_T1], iter2: Iterable[_T2], \/, *, strict: bool = ...) /;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2]]
__new__	pyvscode.py	/^        def __new__(cls, iter1: Iterable[_T1], iter2: Iterable[_T2], iter3: Iterable[_T3], \/) -/;"	m	class:zip	typeref:typename:zip[tuple[_T1,_T2,_T3]]
__new__	pyvscode.py	/^        def __new__(cls, message: str, exceptions: Sequence[_BaseExceptionT_co], \/) -> Self: ../;"	m	class:BaseExceptionGroup	typeref:typename:Self
__new__	pyvscode.py	/^        def __new__(cls, message: str, exceptions: Sequence[_ExceptionT_co], \/) -> Self: ...$/;"	m	class:ExceptionGroup	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__($/;"	m	class:complex	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__($/;"	m	class:map	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__($/;"	m	class:type	typeref:typename:_typeshed.Self
__new__	pyvscode.py	/^    def __new__(cls) -> Self: ...$/;"	m	class:bytes	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls) -> Self: ...$/;"	m	class:frozenset	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls) -> Self: ...$/;"	m	class:object	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, *args: Any, **kwargs: Any) -> Self: ...$/;"	m	class:dict	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, *args: Any, **kwds: Any) -> Self: ...$/;"	m	class:BaseException	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, func: Callable[[_T1, _T2], _S], iter1: Iterable[_T1], iter2: Iterable[_T2],/;"	m	class:map	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, func: Callable[[_T1], _S], iter1: Iterable[_T1], \/) -> Self: ...$/;"	m	class:map	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, function: Callable[[_S], TypeGuard[_T]], iterable: Iterable[_S], \/) -> Sel/;"	m	class:filter	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, function: Callable[[_S], TypeIs[_T]], iterable: Iterable[_S], \/) -> Self: /;"	m	class:filter	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, function: Callable[[_T], Any], iterable: Iterable[_T], \/) -> Self: ...$/;"	m	class:filter	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, function: None, iterable: Iterable[_T | None], \/) -> Self: ...$/;"	m	class:filter	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, iterable: Iterable[_T], start: int = ...) -> Self: ...$/;"	m	class:enumerate	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, iterable: Iterable[_T_co] = ..., \/) -> Self: ...$/;"	m	class:tuple	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, iterable: Iterable[_T_co], \/) -> Self: ...$/;"	m	class:frozenset	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, o: Iterable[SupportsIndex] | SupportsIndex | SupportsBytes | ReadableBuffer/;"	m	class:bytes	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, o: object = ..., \/) -> Self: ...$/;"	m	class:bool	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, o: object, \/) -> type: ...$/;"	m	class:type	typeref:typename:type
__new__	pyvscode.py	/^    def __new__(cls, obj: ReadableBuffer) -> Self: ...$/;"	m	class:memoryview	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, object: ReadableBuffer, encoding: str = ..., errors: str = ...) -> Self: ../;"	m	class:str	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, object: object = ...) -> Self: ...$/;"	m	class:str	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, real: str | SupportsComplex | SupportsFloat | SupportsIndex | complex) -> S/;"	m	class:complex	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, sequence: Reversible[_T], \/) -> Iterator[_T]: ...  # type: ignore[misc]$/;"	m	class:reversed	typeref:typename:Iterator[_T]
__new__	pyvscode.py	/^    def __new__(cls, sequence: SupportsLenAndGetItem[_T], \/) -> Iterator[_T]: ...  # type: igno/;"	m	class:reversed	typeref:typename:Iterator[_T]
__new__	pyvscode.py	/^    def __new__(cls, start: Any, stop: Any, step: Any = ..., \/) -> Self: ...$/;"	m	class:slice	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, start: SupportsIndex, stop: SupportsIndex, step: SupportsIndex = ..., \/) -/;"	m	class:range	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, stop: Any, \/) -> Self: ...$/;"	m	class:slice	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, stop: SupportsIndex, \/) -> Self: ...$/;"	m	class:range	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, string: str, \/, encoding: str, errors: str = ...) -> Self: ...$/;"	m	class:bytes	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, x: ConvertibleToFloat = ..., \/) -> Self: ...$/;"	m	class:float	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, x: ConvertibleToInt = ..., \/) -> Self: ...$/;"	m	class:int	typeref:typename:Self
__new__	pyvscode.py	/^    def __new__(cls, x: str | bytes | bytearray, \/, base: SupportsIndex) -> Self: ...$/;"	m	class:int	typeref:typename:Self
__next__	pyvscode.py	/^    def __next__(self) -> _S: ...$/;"	m	class:map	typeref:typename:_S
__next__	pyvscode.py	/^    def __next__(self) -> _T: ...$/;"	m	class:filter	typeref:typename:_T
__next__	pyvscode.py	/^    def __next__(self) -> _T: ...$/;"	m	class:reversed	typeref:typename:_T
__next__	pyvscode.py	/^    def __next__(self) -> _T_co: ...$/;"	m	class:zip	typeref:typename:_T_co
__next__	pyvscode.py	/^    def __next__(self) -> tuple[int, _T]: ...$/;"	m	class:enumerate	typeref:typename:tuple[int,_T]
__or__	pyvscode.py	/^        def __or__(self, value: Any, \/) -> types.UnionType: ...$/;"	m	class:type	typeref:typename:types.UnionType
__or__	pyvscode.py	/^        def __or__(self, value: dict[_KT, _VT], \/) -> dict[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict[_KT,_VT]
__or__	pyvscode.py	/^        def __or__(self, value: dict[_T1, _T2], \/) -> dict[_KT | _T1, _VT | _T2]: ...$/;"	m	class:dict	typeref:typename:dict[_KT|_T1,_VT|_T2]
__or__	pyvscode.py	/^    def __or__(self, value: AbstractSet[_S], \/) -> frozenset[_T_co | _S]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co|_S]
__or__	pyvscode.py	/^    def __or__(self, value: AbstractSet[_S], \/) -> set[_T | _S]: ...$/;"	m	class:set	typeref:typename:set[_T|_S]
__or__	pyvscode.py	/^    def __or__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__or__	pyvscode.py	/^    def __or__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__or__	pyvscode.py	/^    def __or__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__pos__	pyvscode.py	/^    def __pos__(self) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__pos__	pyvscode.py	/^    def __pos__(self) -> float: ...$/;"	m	class:float	typeref:typename:float
__pos__	pyvscode.py	/^    def __pos__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__pow__	pyvscode.py	/^    def __pow__(self, other: _E, \/) -> _T_co: ...$/;"	m	class:_SupportsPow2	typeref:typename:_T_co
__pow__	pyvscode.py	/^    def __pow__(self, other: _E, modulo: None = None, \/) -> _T_co: ...$/;"	m	class:_SupportsPow3NoneOnly	typeref:typename:_T_co
__pow__	pyvscode.py	/^    def __pow__(self, other: _E, modulo: _M, \/) -> _T_co: ...$/;"	m	class:_SupportsPow3	typeref:typename:_T_co
__pow__	pyvscode.py	/^    def __pow__(self, value: Literal[0], mod: None, \/) -> Literal[1]: ...$/;"	m	class:int	typeref:typename:Literal[1]
__pow__	pyvscode.py	/^    def __pow__(self, value: _NegativeInteger, mod: None = None, \/) -> float: ...$/;"	m	class:int	typeref:typename:float
__pow__	pyvscode.py	/^    def __pow__(self, value: _PositiveInteger, mod: None = None, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__pow__	pyvscode.py	/^    def __pow__(self, value: complex, mod: None = None, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__pow__	pyvscode.py	/^    def __pow__(self, value: float, mod: None = None, \/) -> Any: ...$/;"	m	class:float	typeref:typename:Any
__pow__	pyvscode.py	/^    def __pow__(self, value: int, mod: None = None, \/) -> Any: ...$/;"	m	class:int	typeref:typename:Any
__pow__	pyvscode.py	/^    def __pow__(self, value: int, mod: None = None, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__pow__	pyvscode.py	/^    def __pow__(self, value: int, mod: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__pow__	pyvscode.py	/^    def __pow__(self, x: Literal[0], \/) -> Literal[1]: ...$/;"	m	class:int	typeref:typename:Literal[1]
__prepare__	pyvscode.py	/^    def __prepare__(metacls, name: str, bases: tuple[type, ...], \/, **kwds: Any) -> MutableMapp/;"	m	class:type	typeref:typename:MutableMapping[str,object]
__radd__	pyvscode.py	/^    def __radd__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__radd__	pyvscode.py	/^    def __radd__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__radd__	pyvscode.py	/^    def __radd__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rand__	pyvscode.py	/^    def __rand__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__rand__	pyvscode.py	/^    def __rand__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__rand__	pyvscode.py	/^    def __rand__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rdivmod__	pyvscode.py	/^    def __rdivmod__(self, value: float, \/) -> tuple[float, float]: ...$/;"	m	class:float	typeref:typename:tuple[float,float]
__rdivmod__	pyvscode.py	/^    def __rdivmod__(self, value: int, \/) -> tuple[int, int]: ...$/;"	m	class:int	typeref:typename:tuple[int,int]
__reduce__	pyvscode.py	/^    def __reduce__(self) -> str | tuple[Any, ...]: ...$/;"	m	class:object	typeref:typename:str|tuple[Any,...]
__reduce_ex__	pyvscode.py	/^    def __reduce_ex__(self, protocol: SupportsIndex, \/) -> str | tuple[Any, ...]: ...$/;"	m	class:object	typeref:typename:str|tuple[Any,...]
__release_buffer__	pyvscode.py	/^    def __release_buffer__(self, buffer: memoryview, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__release_buffer__	pyvscode.py	/^    def __release_buffer__(self, buffer: memoryview, \/) -> None: ...$/;"	m	class:memoryview	typeref:typename:None
__repr__	pyvscode.py	/^    def __repr__(self) -> str: ...  # noqa: Y029$/;"	m	class:object	typeref:typename:str
__reversed__	pyvscode.py	/^    def __reversed__(self) -> Iterator[_KT]: ...$/;"	m	class:dict	typeref:typename:Iterator[_KT]
__reversed__	pyvscode.py	/^    def __reversed__(self) -> Iterator[_T]: ...$/;"	m	class:list	typeref:typename:Iterator[_T]
__reversed__	pyvscode.py	/^    def __reversed__(self) -> Iterator[int]: ...$/;"	m	class:range	typeref:typename:Iterator[int]
__rfloordiv__	pyvscode.py	/^    def __rfloordiv__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rfloordiv__	pyvscode.py	/^    def __rfloordiv__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rlshift__	pyvscode.py	/^    def __rlshift__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rmod__	pyvscode.py	/^    def __rmod__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rmod__	pyvscode.py	/^    def __rmod__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rmul__	pyvscode.py	/^    def __rmul__(self, value: SupportsIndex, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
__rmul__	pyvscode.py	/^    def __rmul__(self, value: SupportsIndex, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
__rmul__	pyvscode.py	/^    def __rmul__(self, value: SupportsIndex, \/) -> list[_T]: ...$/;"	m	class:list	typeref:typename:list[_T]
__rmul__	pyvscode.py	/^    def __rmul__(self, value: SupportsIndex, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
__rmul__	pyvscode.py	/^    def __rmul__(self, value: SupportsIndex, \/) -> tuple[_T_co, ...]: ...$/;"	m	class:tuple	typeref:typename:tuple[_T_co,...]
__rmul__	pyvscode.py	/^    def __rmul__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__rmul__	pyvscode.py	/^    def __rmul__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rmul__	pyvscode.py	/^    def __rmul__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rmul__	pyvscode.py	/^    def __rmul__(self: LiteralString, value: SupportsIndex, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
__ror__	pyvscode.py	/^        def __ror__(self, value: Any, \/) -> types.UnionType: ...$/;"	m	class:type	typeref:typename:types.UnionType
__ror__	pyvscode.py	/^        def __ror__(self, value: dict[_KT, _VT], \/) -> dict[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict[_KT,_VT]
__ror__	pyvscode.py	/^        def __ror__(self, value: dict[_T1, _T2], \/) -> dict[_KT | _T1, _VT | _T2]: ...$/;"	m	class:dict	typeref:typename:dict[_KT|_T1,_VT|_T2]
__ror__	pyvscode.py	/^    def __ror__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__ror__	pyvscode.py	/^    def __ror__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__ror__	pyvscode.py	/^    def __ror__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__round__	pyvscode.py	/^    def __round__(self) -> _T_co: ...$/;"	m	class:_SupportsRound1	typeref:typename:_T_co
__round__	pyvscode.py	/^    def __round__(self, ndigits: None = None, \/) -> int: ...$/;"	m	class:float	typeref:typename:int
__round__	pyvscode.py	/^    def __round__(self, ndigits: SupportsIndex = ..., \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__round__	pyvscode.py	/^    def __round__(self, ndigits: SupportsIndex, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__round__	pyvscode.py	/^    def __round__(self, ndigits: int, \/) -> _T_co: ...$/;"	m	class:_SupportsRound2	typeref:typename:_T_co
__rpow__	pyvscode.py	/^    def __rpow__(self, value: _NegativeInteger, mod: None = None, \/) -> complex: ...$/;"	m	class:float	typeref:typename:complex
__rpow__	pyvscode.py	/^    def __rpow__(self, value: _PositiveInteger, mod: None = None, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rpow__	pyvscode.py	/^    def __rpow__(self, value: complex, mod: None = None, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__rpow__	pyvscode.py	/^    def __rpow__(self, value: float, mod: None = None, \/) -> Any: ...$/;"	m	class:float	typeref:typename:Any
__rpow__	pyvscode.py	/^    def __rpow__(self, value: int, mod: int | None = None, \/) -> Any: ...$/;"	m	class:int	typeref:typename:Any
__rrshift__	pyvscode.py	/^    def __rrshift__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rshift__	pyvscode.py	/^    def __rshift__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rsub__	pyvscode.py	/^    def __rsub__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__rsub__	pyvscode.py	/^    def __rsub__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rsub__	pyvscode.py	/^    def __rsub__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__rtruediv__	pyvscode.py	/^    def __rtruediv__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__rtruediv__	pyvscode.py	/^    def __rtruediv__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__rtruediv__	pyvscode.py	/^    def __rtruediv__(self, value: int, \/) -> float: ...$/;"	m	class:int	typeref:typename:float
__rxor__	pyvscode.py	/^    def __rxor__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__rxor__	pyvscode.py	/^    def __rxor__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__rxor__	pyvscode.py	/^    def __rxor__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__set__	pyvscode.py	/^    def __set__(self, instance: Any, value: Any, \/) -> None: ...$/;"	m	class:property	typeref:typename:None
__setattr__	pyvscode.py	/^    def __setattr__(self, name: str, value: Any, \/) -> None: ...$/;"	m	class:object	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: SupportsIndex | tuple[SupportsIndex, ...], value: SupportsIndex, /;"	m	class:memoryview	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: SupportsIndex, value: SupportsIndex, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: SupportsIndex, value: _T, \/) -> None: ...$/;"	m	class:list	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: _KT, value: _VT, \/) -> None: ...$/;"	m	class:dict	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: slice, value: Iterable[SupportsIndex] | bytes, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: slice, value: Iterable[_T], \/) -> None: ...$/;"	m	class:list	typeref:typename:None
__setitem__	pyvscode.py	/^    def __setitem__(self, key: slice, value: ReadableBuffer, \/) -> None: ...$/;"	m	class:memoryview	typeref:typename:None
__setstate__	pyvscode.py	/^    def __setstate__(self, state: dict[str, Any] | None, \/) -> None: ...$/;"	m	class:BaseException	typeref:typename:None
__sizeof__	pyvscode.py	/^    def __sizeof__(self) -> int: ...$/;"	m	class:object	typeref:typename:int
__str__	pyvscode.py	/^    def __str__(self) -> str: ...  # noqa: Y029$/;"	m	class:object	typeref:typename:str
__sub__	pyvscode.py	/^    def __sub__(self, value: AbstractSet[_T | None], \/) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
__sub__	pyvscode.py	/^    def __sub__(self, value: AbstractSet[_T_co], \/) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
__sub__	pyvscode.py	/^    def __sub__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__sub__	pyvscode.py	/^    def __sub__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__sub__	pyvscode.py	/^    def __sub__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
__subclasscheck__	pyvscode.py	/^    def __subclasscheck__(self, subclass: type, \/) -> bool: ...$/;"	m	class:type	typeref:typename:bool
__subclasses__	pyvscode.py	/^    def __subclasses__(self: _typeshed.Self) -> list[_typeshed.Self]: ...$/;"	m	class:type	typeref:typename:list[_typeshed.Self]
__subclasshook__	pyvscode.py	/^    def __subclasshook__(cls, subclass: type, \/) -> bool: ...$/;"	m	class:object	typeref:typename:bool
__text_signature__	pyvscode.py	/^    def __text_signature__(self) -> str | None: ...$/;"	m	class:type	typeref:typename:str|None
__truediv__	pyvscode.py	/^    def __truediv__(self, value: complex, \/) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
__truediv__	pyvscode.py	/^    def __truediv__(self, value: float, \/) -> float: ...$/;"	m	class:float	typeref:typename:float
__truediv__	pyvscode.py	/^    def __truediv__(self, value: int, \/) -> float: ...$/;"	m	class:int	typeref:typename:float
__trunc__	pyvscode.py	/^    def __trunc__(self) -> int: ...$/;"	m	class:float	typeref:typename:int
__trunc__	pyvscode.py	/^    def __trunc__(self) -> int: ...$/;"	m	class:int	typeref:typename:int
__weakrefoffset__	pyvscode.py	/^    def __weakrefoffset__(self) -> int: ...$/;"	m	class:type	typeref:typename:int
__wrapped__	pyvscode.py	/^        def __wrapped__(self) -> Callable[Concatenate[type[_T], _P], _R_co]: ...$/;"	m	class:classmethod	typeref:typename:Callable[Concatenate[type[_T],_P],_R_co]
__wrapped__	pyvscode.py	/^        def __wrapped__(self) -> Callable[_P, _R_co]: ...$/;"	m	class:staticmethod	typeref:typename:Callable[_P,_R_co]
__xor__	pyvscode.py	/^    def __xor__(self, value: AbstractSet[_S], \/) -> frozenset[_T_co | _S]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co|_S]
__xor__	pyvscode.py	/^    def __xor__(self, value: AbstractSet[_S], \/) -> set[_T | _S]: ...$/;"	m	class:set	typeref:typename:set[_T|_S]
__xor__	pyvscode.py	/^    def __xor__(self, value: bool, \/) -> bool: ...$/;"	m	class:bool	typeref:typename:bool
__xor__	pyvscode.py	/^    def __xor__(self, value: int, \/) -> int: ...$/;"	m	class:bool	typeref:typename:int
__xor__	pyvscode.py	/^    def __xor__(self, value: int, \/) -> int: ...$/;"	m	class:int	typeref:typename:int
abs	pyvscode.py	/^def abs(x: SupportsAbs[_T], \/) -> _T: ...$/;"	f	typeref:typename:_T
add	pyvscode.py	/^    def add(self, element: _T, \/) -> None: ...$/;"	m	class:set	typeref:typename:None
add_note	pyvscode.py	/^        def add_note(self, note: str, \/) -> None: ...$/;"	m	class:BaseException	typeref:typename:None
aiter	pyvscode.py	/^    def aiter(async_iterable: SupportsAiter[_SupportsAnextT], \/) -> _SupportsAnextT: ...$/;"	f	typeref:typename:_SupportsAnextT
all	pyvscode.py	/^def all(iterable: Iterable[object], \/) -> bool: ...$/;"	f	typeref:typename:bool
anext	pyvscode.py	/^    async def anext(i: SupportsAnext[_T], default: _VT, \/) -> _T | _VT: ...$/;"	f	typeref:typename:_T|_VT
anext	pyvscode.py	/^    def anext(i: _SupportsSynchronousAnext[_AwaitableT], \/) -> _AwaitableT: ...$/;"	f	typeref:typename:_AwaitableT
any	pyvscode.py	/^def any(iterable: Iterable[object], \/) -> bool: ...$/;"	f	typeref:typename:bool
append	pyvscode.py	/^    def append(self, item: SupportsIndex, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
append	pyvscode.py	/^    def append(self, object: _T, \/) -> None: ...$/;"	m	class:list	typeref:typename:None
as_integer_ratio	pyvscode.py	/^    def as_integer_ratio(self) -> tuple[int, Literal[1]]: ...$/;"	m	class:int	typeref:typename:tuple[int,Literal[1]]
as_integer_ratio	pyvscode.py	/^    def as_integer_ratio(self) -> tuple[int, int]: ...$/;"	m	class:float	typeref:typename:tuple[int,int]
ascii	pyvscode.py	/^def ascii(obj: object, \/) -> str: ...$/;"	f	typeref:typename:str
bin	pyvscode.py	/^def bin(number: int | SupportsIndex, \/) -> str: ...$/;"	f	typeref:typename:str
bit_count	pyvscode.py	/^        def bit_count(self) -> int: ...$/;"	m	class:int	typeref:typename:int
bit_length	pyvscode.py	/^    def bit_length(self) -> int: ...$/;"	m	class:int	typeref:typename:int
bool	pyvscode.py	/^class bool(int):$/;"	c
breakpoint	pyvscode.py	/^def breakpoint(*args: Any, **kws: Any) -> None: ...$/;"	f	typeref:typename:None
bytearray	pyvscode.py	/^class bytearray(MutableSequence[int]):$/;"	c
bytes	pyvscode.py	/^class bytes(Sequence[int]):$/;"	c
c_contiguous	pyvscode.py	/^    def c_contiguous(self) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
callable	pyvscode.py	/^def callable(obj: object, \/) -> TypeIs[Callable[..., object]]: ...$/;"	f	typeref:typename:TypeIs[Callable[...,object]]
capitalize	pyvscode.py	/^    def capitalize(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
capitalize	pyvscode.py	/^    def capitalize(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
capitalize	pyvscode.py	/^    def capitalize(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
capitalize	pyvscode.py	/^    def capitalize(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
casefold	pyvscode.py	/^    def casefold(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
casefold	pyvscode.py	/^    def casefold(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
cast	pyvscode.py	/^    def cast(self, format: Literal["?"], shape: list[int] | tuple[int, ...] = ...) -> memoryview/;"	m	class:memoryview	typeref:typename:memoryview[bool]
cast	pyvscode.py	/^    def cast(self, format: Literal["c", "@c"], shape: list[int] | tuple[int, ...] = ...) -> memo/;"	m	class:memoryview	typeref:typename:memoryview[bytes]
cast	pyvscode.py	/^    def cast(self, format: Literal["f", "@f", "d", "@d"], shape: list[int] | tuple[int, ...] = ./;"	m	class:memoryview	typeref:typename:memoryview[float]
cast	pyvscode.py	/^    def cast(self, format: _IntegerFormats, shape: list[int] | tuple[int, ...] = ...) -> memoryv/;"	m	class:memoryview	typeref:typename:memoryview
center	pyvscode.py	/^    def center(self, width: SupportsIndex, fillchar: bytes = b" ", \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
center	pyvscode.py	/^    def center(self, width: SupportsIndex, fillchar: bytes = b" ", \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
center	pyvscode.py	/^    def center(self, width: SupportsIndex, fillchar: str = " ", \/) -> str: ...  # type: ignore[/;"	m	class:str	typeref:typename:str
center	pyvscode.py	/^    def center(self: LiteralString, width: SupportsIndex, fillchar: LiteralString = " ", \/) -> /;"	m	class:str	typeref:typename:LiteralString
chr	pyvscode.py	/^def chr(i: int, \/) -> str: ...$/;"	f	typeref:typename:str
classmethod	pyvscode.py	/^class classmethod(Generic[_T, _P, _R_co]):$/;"	c
compile	pyvscode.py	/^def compile($/;"	f	typeref:typename:Any
compile	pyvscode.py	/^def compile($/;"	f	typeref:typename:CodeType
compile	pyvscode.py	/^def compile($/;"	f	typeref:typename:_ast.AST
complex	pyvscode.py	/^class complex:$/;"	c
conjugate	pyvscode.py	/^    def conjugate(self) -> complex: ...$/;"	m	class:complex	typeref:typename:complex
conjugate	pyvscode.py	/^    def conjugate(self) -> float: ...$/;"	m	class:float	typeref:typename:float
conjugate	pyvscode.py	/^    def conjugate(self) -> int: ...$/;"	m	class:int	typeref:typename:int
contiguous	pyvscode.py	/^    def contiguous(self) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
copy	pyvscode.py	/^    def copy(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
copy	pyvscode.py	/^    def copy(self) -> dict[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict[_KT,_VT]
copy	pyvscode.py	/^    def copy(self) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
copy	pyvscode.py	/^    def copy(self) -> list[_T]: ...$/;"	m	class:list	typeref:typename:list[_T]
copy	pyvscode.py	/^    def copy(self) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
copyright	pyvscode.py	/^def copyright() -> None: ...$/;"	f	typeref:typename:None
count	pyvscode.py	/^    def count($/;"	m	class:bytearray	typeref:typename:int
count	pyvscode.py	/^    def count($/;"	m	class:bytes	typeref:typename:int
count	pyvscode.py	/^    def count(self, sub: str, start: SupportsIndex | None = ..., end: SupportsIndex | None = .../;"	m	class:str	typeref:typename:int
count	pyvscode.py	/^    def count(self, value: Any, \/) -> int: ...$/;"	m	class:tuple	typeref:typename:int
count	pyvscode.py	/^    def count(self, value: _T, \/) -> int: ...$/;"	m	class:list	typeref:typename:int
count	pyvscode.py	/^    def count(self, value: int, \/) -> int: ...$/;"	m	class:range	typeref:typename:int
credits	pyvscode.py	/^def credits() -> None: ...$/;"	f	typeref:typename:None
decode	pyvscode.py	/^    def decode(self, encoding: str = "utf-8", errors: str = "strict") -> str: ...$/;"	m	class:bytearray	typeref:typename:str
decode	pyvscode.py	/^    def decode(self, encoding: str = "utf-8", errors: str = "strict") -> str: ...$/;"	m	class:bytes	typeref:typename:str
delattr	pyvscode.py	/^def delattr(obj: object, name: str, \/) -> None: ...$/;"	f	typeref:typename:None
deleter	pyvscode.py	/^    def deleter(self, fdel: Callable[[Any], None], \/) -> property: ...$/;"	m	class:property	typeref:typename:property
denominator	pyvscode.py	/^    def denominator(self) -> Literal[1]: ...$/;"	m	class:int	typeref:typename:Literal[1]
derive	pyvscode.py	/^        def derive(self, excs: Sequence[_BaseExceptionT], \/) -> BaseExceptionGroup[_BaseExcepti/;"	m	class:BaseExceptionGroup	typeref:typename:BaseExceptionGroup[_BaseExceptionT]
derive	pyvscode.py	/^        def derive(self, excs: Sequence[_ExceptionT], \/) -> ExceptionGroup[_ExceptionT]: ...$/;"	m	class:BaseExceptionGroup	typeref:typename:ExceptionGroup[_ExceptionT]
dict	pyvscode.py	/^class dict(MutableMapping[_KT, _VT]):$/;"	c
difference	pyvscode.py	/^    def difference(self, *s: Iterable[Any]) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
difference	pyvscode.py	/^    def difference(self, *s: Iterable[object]) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
difference_update	pyvscode.py	/^    def difference_update(self, *s: Iterable[Any]) -> None: ...$/;"	m	class:set	typeref:typename:None
dir	pyvscode.py	/^def dir(o: object = ..., \/) -> list[str]: ...$/;"	f	typeref:typename:list[str]
discard	pyvscode.py	/^    def discard(self, element: _T, \/) -> None: ...$/;"	m	class:set	typeref:typename:None
divmod	pyvscode.py	/^def divmod(x: SupportsDivMod[_T_contra, _T_co], y: _T_contra, \/) -> _T_co: ...$/;"	f	typeref:typename:_T_co
divmod	pyvscode.py	/^def divmod(x: _T_contra, y: SupportsRDivMod[_T_contra, _T_co], \/) -> _T_co: ...$/;"	f	typeref:typename:_T_co
ellipsis	pyvscode.py	/^    class ellipsis: ...$/;"	c
ellipsis	pyvscode.py	/^    ellipsis = EllipsisType$/;"	v
encode	pyvscode.py	/^    def encode(self, encoding: str = "utf-8", errors: str = "strict") -> bytes: ...$/;"	m	class:str	typeref:typename:bytes
endswith	pyvscode.py	/^    def endswith($/;"	m	class:bytearray	typeref:typename:bool
endswith	pyvscode.py	/^    def endswith($/;"	m	class:bytes	typeref:typename:bool
endswith	pyvscode.py	/^    def endswith($/;"	m	class:str	typeref:typename:bool
enumerate	pyvscode.py	/^class enumerate(Iterator[tuple[int, _T]]):$/;"	c
eval	pyvscode.py	/^    def eval($/;"	f	typeref:typename:Any
exceptions	pyvscode.py	/^        def exceptions(self) -> tuple[_BaseExceptionT_co | BaseExceptionGroup[_BaseExceptionT_co/;"	m	class:BaseExceptionGroup	typeref:typename:tuple[_BaseExceptionT_co|BaseExceptionGroup[_BaseExceptionT_co],...]
exceptions	pyvscode.py	/^        def exceptions(self) -> tuple[_ExceptionT_co | ExceptionGroup[_ExceptionT_co], ...]: ...$/;"	m	class:ExceptionGroup	typeref:typename:tuple[_ExceptionT_co|ExceptionGroup[_ExceptionT_co],...]
exec	pyvscode.py	/^    def exec($/;"	f	typeref:typename:None
exit	pyvscode.py	/^def exit(code: sys._ExitCode = None) -> NoReturn: ...$/;"	f	typeref:typename:NoReturn
expandtabs	pyvscode.py	/^    def expandtabs(self, tabsize: SupportsIndex = 8) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
expandtabs	pyvscode.py	/^    def expandtabs(self, tabsize: SupportsIndex = 8) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
expandtabs	pyvscode.py	/^    def expandtabs(self, tabsize: SupportsIndex = 8) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
expandtabs	pyvscode.py	/^    def expandtabs(self: LiteralString, tabsize: SupportsIndex = 8) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
extend	pyvscode.py	/^    def extend(self, iterable: Iterable[_T], \/) -> None: ...$/;"	m	class:list	typeref:typename:None
extend	pyvscode.py	/^    def extend(self, iterable_of_ints: Iterable[SupportsIndex], \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
f_contiguous	pyvscode.py	/^    def f_contiguous(self) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
filter	pyvscode.py	/^class filter(Iterator[_T]):$/;"	c
find	pyvscode.py	/^    def find($/;"	m	class:bytearray	typeref:typename:int
find	pyvscode.py	/^    def find($/;"	m	class:bytes	typeref:typename:int
find	pyvscode.py	/^    def find(self, sub: str, start: SupportsIndex | None = ..., end: SupportsIndex | None = ...,/;"	m	class:str	typeref:typename:int
float	pyvscode.py	/^class float:$/;"	c
format	pyvscode.py	/^    def format(self) -> str: ...$/;"	m	class:memoryview	typeref:typename:str
format	pyvscode.py	/^    def format(self, *args: object, **kwargs: object) -> str: ...$/;"	m	class:str	typeref:typename:str
format	pyvscode.py	/^    def format(self: LiteralString, *args: LiteralString, **kwargs: LiteralString) -> LiteralStr/;"	m	class:str	typeref:typename:LiteralString
format	pyvscode.py	/^def format(value: object, format_spec: str = "", \/) -> str: ...$/;"	f	typeref:typename:str
format_map	pyvscode.py	/^    def format_map(self, mapping: _FormatMapMapping, \/) -> str: ...$/;"	m	class:str	typeref:typename:str
from_bytes	pyvscode.py	/^        def from_bytes($/;"	m	class:int	typeref:typename:Self
fromhex	pyvscode.py	/^    def fromhex(cls, string: str, \/) -> Self: ...$/;"	m	class:bytearray	typeref:typename:Self
fromhex	pyvscode.py	/^    def fromhex(cls, string: str, \/) -> Self: ...$/;"	m	class:bytes	typeref:typename:Self
fromhex	pyvscode.py	/^    def fromhex(cls, string: str, \/) -> Self: ...$/;"	m	class:float	typeref:typename:Self
fromkeys	pyvscode.py	/^    def fromkeys(cls, iterable: Iterable[_T], value: None = None, \/) -> dict[_T, Any | None]: ./;"	m	class:dict	typeref:typename:dict[_T,Any|None]
fromkeys	pyvscode.py	/^    def fromkeys(cls, iterable: Iterable[_T], value: _S, \/) -> dict[_T, _S]: ...$/;"	m	class:dict	typeref:typename:dict[_T,_S]
frozenset	pyvscode.py	/^class frozenset(AbstractSet[_T_co]):$/;"	c
function	pyvscode.py	/^class function:$/;"	c
get	pyvscode.py	/^    def get(self, key: _KT, \/) -> _VT | None: ...$/;"	m	class:dict	typeref:typename:_VT|None
get	pyvscode.py	/^    def get(self, key: _KT, default: _T, \/) -> _VT | _T: ...$/;"	m	class:dict	typeref:typename:_VT|_T
get	pyvscode.py	/^    def get(self, key: _KT, default: _VT, \/) -> _VT: ...$/;"	m	class:dict	typeref:typename:_VT
getattr	pyvscode.py	/^def getattr(o: object, name: str, \/) -> Any: ...$/;"	f	typeref:typename:Any
getattr	pyvscode.py	/^def getattr(o: object, name: str, default: None, \/) -> Any | None: ...$/;"	f	typeref:typename:Any|None
getattr	pyvscode.py	/^def getattr(o: object, name: str, default: _T, \/) -> Any | _T: ...$/;"	f	typeref:typename:Any|_T
getattr	pyvscode.py	/^def getattr(o: object, name: str, default: bool, \/) -> Any | bool: ...$/;"	f	typeref:typename:Any|bool
getattr	pyvscode.py	/^def getattr(o: object, name: str, default: dict[Any, Any], \/) -> Any | dict[Any, Any]: ...$/;"	f	typeref:typename:Any|dict[Any,Any]
getattr	pyvscode.py	/^def getattr(o: object, name: str, default: list[Any], \/) -> Any | list[Any]: ...$/;"	f	typeref:typename:Any|list[Any]
getter	pyvscode.py	/^    def getter(self, fget: Callable[[Any], Any], \/) -> property: ...$/;"	m	class:property	typeref:typename:property
globals	pyvscode.py	/^def globals() -> dict[str, Any]: ...$/;"	f	typeref:typename:dict[str,Any]
hasattr	pyvscode.py	/^def hasattr(obj: object, name: str, \/) -> bool: ...$/;"	f	typeref:typename:bool
hash	pyvscode.py	/^def hash(obj: object, \/) -> int: ...$/;"	f	typeref:typename:int
help	pyvscode.py	/^def help(request: object = ...) -> None: ...$/;"	f	typeref:typename:None
hex	pyvscode.py	/^    def hex(self) -> str: ...$/;"	m	class:float	typeref:typename:str
hex	pyvscode.py	/^    def hex(self, sep: str | bytes = ..., bytes_per_sep: SupportsIndex = ...) -> str: ...$/;"	m	class:bytearray	typeref:typename:str
hex	pyvscode.py	/^    def hex(self, sep: str | bytes = ..., bytes_per_sep: SupportsIndex = ...) -> str: ...$/;"	m	class:bytes	typeref:typename:str
hex	pyvscode.py	/^    def hex(self, sep: str | bytes = ..., bytes_per_sep: SupportsIndex = ...) -> str: ...$/;"	m	class:memoryview	typeref:typename:str
hex	pyvscode.py	/^def hex(number: int | SupportsIndex, \/) -> str: ...$/;"	f	typeref:typename:str
id	pyvscode.py	/^def id(obj: object, \/) -> int: ...$/;"	f	typeref:typename:int
imag	pyvscode.py	/^    def imag(self) -> Literal[0]: ...$/;"	m	class:int	typeref:typename:Literal[0]
imag	pyvscode.py	/^    def imag(self) -> float: ...$/;"	m	class:complex	typeref:typename:float
imag	pyvscode.py	/^    def imag(self) -> float: ...$/;"	m	class:float	typeref:typename:float
index	pyvscode.py	/^    def index($/;"	m	class:bytearray	typeref:typename:int
index	pyvscode.py	/^    def index($/;"	m	class:bytes	typeref:typename:int
index	pyvscode.py	/^    def index(self, sub: str, start: SupportsIndex | None = ..., end: SupportsIndex | None = .../;"	m	class:str	typeref:typename:int
index	pyvscode.py	/^    def index(self, value: Any, start: SupportsIndex = 0, stop: SupportsIndex = sys.maxsize, \/)/;"	m	class:tuple	typeref:typename:int
index	pyvscode.py	/^    def index(self, value: _T, start: SupportsIndex = 0, stop: SupportsIndex = sys.maxsize, \/) /;"	m	class:list	typeref:typename:int
index	pyvscode.py	/^    def index(self, value: int, \/) -> int: ...  # type: ignore[override]$/;"	m	class:range	typeref:typename:int
indices	pyvscode.py	/^    def indices(self, len: SupportsIndex, \/) -> tuple[int, int, int]: ...$/;"	m	class:slice	typeref:typename:tuple[int,int,int]
input	pyvscode.py	/^def input(prompt: object = "", \/) -> str: ...$/;"	f	typeref:typename:str
insert	pyvscode.py	/^    def insert(self, index: SupportsIndex, item: SupportsIndex, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
insert	pyvscode.py	/^    def insert(self, index: SupportsIndex, object: _T, \/) -> None: ...$/;"	m	class:list	typeref:typename:None
int	pyvscode.py	/^class int:$/;"	c
intersection	pyvscode.py	/^    def intersection(self, *s: Iterable[Any]) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
intersection	pyvscode.py	/^    def intersection(self, *s: Iterable[object]) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
intersection_update	pyvscode.py	/^    def intersection_update(self, *s: Iterable[Any]) -> None: ...$/;"	m	class:set	typeref:typename:None
is_integer	pyvscode.py	/^        def is_integer(self) -> Literal[True]: ...$/;"	m	class:int	typeref:typename:Literal[True]
is_integer	pyvscode.py	/^    def is_integer(self) -> bool: ...$/;"	m	class:float	typeref:typename:bool
isalnum	pyvscode.py	/^    def isalnum(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isalnum	pyvscode.py	/^    def isalnum(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isalnum	pyvscode.py	/^    def isalnum(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isalpha	pyvscode.py	/^    def isalpha(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isalpha	pyvscode.py	/^    def isalpha(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isalpha	pyvscode.py	/^    def isalpha(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isascii	pyvscode.py	/^    def isascii(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isascii	pyvscode.py	/^    def isascii(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isascii	pyvscode.py	/^    def isascii(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isdecimal	pyvscode.py	/^    def isdecimal(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isdigit	pyvscode.py	/^    def isdigit(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isdigit	pyvscode.py	/^    def isdigit(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isdigit	pyvscode.py	/^    def isdigit(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isdisjoint	pyvscode.py	/^    def isdisjoint(self, s: Iterable[Any], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
isdisjoint	pyvscode.py	/^    def isdisjoint(self, s: Iterable[_T_co], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
isidentifier	pyvscode.py	/^    def isidentifier(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isinstance	pyvscode.py	/^def isinstance(obj: object, class_or_tuple: _ClassInfo, \/) -> bool: ...$/;"	f	typeref:typename:bool
islower	pyvscode.py	/^    def islower(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
islower	pyvscode.py	/^    def islower(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
islower	pyvscode.py	/^    def islower(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isnumeric	pyvscode.py	/^    def isnumeric(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isprintable	pyvscode.py	/^    def isprintable(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isspace	pyvscode.py	/^    def isspace(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isspace	pyvscode.py	/^    def isspace(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isspace	pyvscode.py	/^    def isspace(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
issubclass	pyvscode.py	/^def issubclass(cls: type, class_or_tuple: _ClassInfo, \/) -> bool: ...$/;"	f	typeref:typename:bool
issubset	pyvscode.py	/^    def issubset(self, s: Iterable[Any], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
issubset	pyvscode.py	/^    def issubset(self, s: Iterable[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
issuperset	pyvscode.py	/^    def issuperset(self, s: Iterable[Any], \/) -> bool: ...$/;"	m	class:set	typeref:typename:bool
issuperset	pyvscode.py	/^    def issuperset(self, s: Iterable[object], \/) -> bool: ...$/;"	m	class:frozenset	typeref:typename:bool
istitle	pyvscode.py	/^    def istitle(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
istitle	pyvscode.py	/^    def istitle(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
istitle	pyvscode.py	/^    def istitle(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
isupper	pyvscode.py	/^    def isupper(self) -> bool: ...$/;"	m	class:bytearray	typeref:typename:bool
isupper	pyvscode.py	/^    def isupper(self) -> bool: ...$/;"	m	class:bytes	typeref:typename:bool
isupper	pyvscode.py	/^    def isupper(self) -> bool: ...$/;"	m	class:str	typeref:typename:bool
items	pyvscode.py	/^    def items(self) -> dict_items[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict_items[_KT,_VT]
itemsize	pyvscode.py	/^    def itemsize(self) -> int: ...$/;"	m	class:memoryview	typeref:typename:int
iter	pyvscode.py	/^def iter(object: Callable[[], _T | None], sentinel: None, \/) -> Iterator[_T]: ...$/;"	f	typeref:typename:Iterator[_T]
iter	pyvscode.py	/^def iter(object: Callable[[], _T], sentinel: object, \/) -> Iterator[_T]: ...$/;"	f	typeref:typename:Iterator[_T]
iter	pyvscode.py	/^def iter(object: SupportsIter[_SupportsNextT], \/) -> _SupportsNextT: ...$/;"	f	typeref:typename:_SupportsNextT
iter	pyvscode.py	/^def iter(object: _GetItemIterable[_T], \/) -> Iterator[_T]: ...$/;"	f	typeref:typename:Iterator[_T]
join	pyvscode.py	/^    def join(self, iterable: Iterable[str], \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
join	pyvscode.py	/^    def join(self, iterable_of_bytes: Iterable[ReadableBuffer], \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
join	pyvscode.py	/^    def join(self, iterable_of_bytes: Iterable[ReadableBuffer], \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
join	pyvscode.py	/^    def join(self: LiteralString, iterable: Iterable[LiteralString], \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
keys	pyvscode.py	/^    def keys(self) -> dict_keys[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict_keys[_KT,_VT]
len	pyvscode.py	/^def len(obj: Sized, \/) -> int: ...$/;"	f	typeref:typename:int
license	pyvscode.py	/^def license() -> None: ...$/;"	f	typeref:typename:None
list	pyvscode.py	/^class list(MutableSequence[_T]):$/;"	c
ljust	pyvscode.py	/^    def ljust(self, width: SupportsIndex, fillchar: bytes | bytearray = b" ", \/) -> bytearray: /;"	m	class:bytearray	typeref:typename:bytearray
ljust	pyvscode.py	/^    def ljust(self, width: SupportsIndex, fillchar: bytes | bytearray = b" ", \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
ljust	pyvscode.py	/^    def ljust(self, width: SupportsIndex, fillchar: str = " ", \/) -> str: ...  # type: ignore[m/;"	m	class:str	typeref:typename:str
ljust	pyvscode.py	/^    def ljust(self: LiteralString, width: SupportsIndex, fillchar: LiteralString = " ", \/) -> L/;"	m	class:str	typeref:typename:LiteralString
locals	pyvscode.py	/^def locals() -> dict[str, Any]: ...$/;"	f	typeref:typename:dict[str,Any]
lower	pyvscode.py	/^    def lower(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
lower	pyvscode.py	/^    def lower(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
lower	pyvscode.py	/^    def lower(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
lower	pyvscode.py	/^    def lower(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
lstrip	pyvscode.py	/^    def lstrip(self, bytes: ReadableBuffer | None = None, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
lstrip	pyvscode.py	/^    def lstrip(self, bytes: ReadableBuffer | None = None, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
lstrip	pyvscode.py	/^    def lstrip(self, chars: str | None = None, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
lstrip	pyvscode.py	/^    def lstrip(self: LiteralString, chars: LiteralString | None = None, \/) -> LiteralString: ../;"	m	class:str	typeref:typename:LiteralString
maketrans	pyvscode.py	/^    def maketrans(frm: ReadableBuffer, to: ReadableBuffer, \/) -> bytes: ...$/;"	m	class:bytearray	typeref:typename:bytes
maketrans	pyvscode.py	/^    def maketrans(frm: ReadableBuffer, to: ReadableBuffer, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
maketrans	pyvscode.py	/^    def maketrans(x: dict[int, _T] | dict[str, _T] | dict[str | int, _T], \/) -> dict[int, _T]: /;"	m	class:str	typeref:typename:dict[int,_T]
maketrans	pyvscode.py	/^    def maketrans(x: str, y: str, \/) -> dict[int, int]: ...$/;"	m	class:str	typeref:typename:dict[int,int]
maketrans	pyvscode.py	/^    def maketrans(x: str, y: str, z: str, \/) -> dict[int, int | None]: ...$/;"	m	class:str	typeref:typename:dict[int,int|None]
map	pyvscode.py	/^class map(Iterator[_S]):$/;"	c
max	pyvscode.py	/^def max($/;"	f	typeref:typename:SupportsRichComparisonT
max	pyvscode.py	/^def max(arg1: _T, arg2: _T, \/, *_args: _T, key: Callable[[_T], SupportsRichComparison]) -> _T: /;"	f	typeref:typename:_T
max	pyvscode.py	/^def max(iterable: Iterable[SupportsRichComparisonT], \/, *, key: None = None) -> SupportsRichCom/;"	f	typeref:typename:SupportsRichComparisonT
max	pyvscode.py	/^def max(iterable: Iterable[SupportsRichComparisonT], \/, *, key: None = None, default: _T) -> Su/;"	f	typeref:typename:SupportsRichComparisonT|_T
max	pyvscode.py	/^def max(iterable: Iterable[_T1], \/, *, key: Callable[[_T1], SupportsRichComparison], default: _/;"	f	typeref:typename:_T1|_T2
max	pyvscode.py	/^def max(iterable: Iterable[_T], \/, *, key: Callable[[_T], SupportsRichComparison]) -> _T: ...$/;"	f	typeref:typename:_T
memoryview	pyvscode.py	/^class memoryview(Sequence[_I]):$/;"	c
message	pyvscode.py	/^        def message(self) -> str: ...$/;"	m	class:BaseExceptionGroup	typeref:typename:str
min	pyvscode.py	/^def min($/;"	f	typeref:typename:SupportsRichComparisonT
min	pyvscode.py	/^def min(arg1: _T, arg2: _T, \/, *_args: _T, key: Callable[[_T], SupportsRichComparison]) -> _T: /;"	f	typeref:typename:_T
min	pyvscode.py	/^def min(iterable: Iterable[SupportsRichComparisonT], \/, *, key: None = None) -> SupportsRichCom/;"	f	typeref:typename:SupportsRichComparisonT
min	pyvscode.py	/^def min(iterable: Iterable[SupportsRichComparisonT], \/, *, key: None = None, default: _T) -> Su/;"	f	typeref:typename:SupportsRichComparisonT|_T
min	pyvscode.py	/^def min(iterable: Iterable[_T1], \/, *, key: Callable[[_T1], SupportsRichComparison], default: _/;"	f	typeref:typename:_T1|_T2
min	pyvscode.py	/^def min(iterable: Iterable[_T], \/, *, key: Callable[[_T], SupportsRichComparison]) -> _T: ...$/;"	f	typeref:typename:_T
mro	pyvscode.py	/^    def mro(self) -> list[type]: ...$/;"	m	class:type	typeref:typename:list[type]
nbytes	pyvscode.py	/^    def nbytes(self) -> int: ...$/;"	m	class:memoryview	typeref:typename:int
ndim	pyvscode.py	/^    def ndim(self) -> int: ...$/;"	m	class:memoryview	typeref:typename:int
next	pyvscode.py	/^def next(i: SupportsNext[_T], \/) -> _T: ...$/;"	f	typeref:typename:_T
next	pyvscode.py	/^def next(i: SupportsNext[_T], default: _VT, \/) -> _T | _VT: ...$/;"	f	typeref:typename:_T|_VT
numerator	pyvscode.py	/^    def numerator(self) -> int: ...$/;"	m	class:int	typeref:typename:int
obj	pyvscode.py	/^    def obj(self) -> ReadableBuffer: ...$/;"	m	class:memoryview	typeref:typename:ReadableBuffer
object	pyvscode.py	/^class object:$/;"	c
oct	pyvscode.py	/^def oct(number: int | SupportsIndex, \/) -> str: ...$/;"	f	typeref:typename:str
open	pyvscode.py	/^def open($/;"	f	typeref:typename:BinaryIO
open	pyvscode.py	/^def open($/;"	f	typeref:typename:BufferedRandom
open	pyvscode.py	/^def open($/;"	f	typeref:typename:BufferedReader
open	pyvscode.py	/^def open($/;"	f	typeref:typename:BufferedWriter
open	pyvscode.py	/^def open($/;"	f	typeref:typename:FileIO
open	pyvscode.py	/^def open($/;"	f	typeref:typename:IO[Any]
open	pyvscode.py	/^def open($/;"	f	typeref:typename:TextIOWrapper
ord	pyvscode.py	/^def ord(c: str | bytes | bytearray, \/) -> int: ...$/;"	f	typeref:typename:int
partition	pyvscode.py	/^    def partition(self, sep: ReadableBuffer, \/) -> tuple[bytearray, bytearray, bytearray]: ...$/;"	m	class:bytearray	typeref:typename:tuple[bytearray,bytearray,bytearray]
partition	pyvscode.py	/^    def partition(self, sep: ReadableBuffer, \/) -> tuple[bytes, bytes, bytes]: ...$/;"	m	class:bytes	typeref:typename:tuple[bytes,bytes,bytes]
partition	pyvscode.py	/^    def partition(self, sep: str, \/) -> tuple[str, str, str]: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:tuple[str,str,str]
partition	pyvscode.py	/^    def partition(self: LiteralString, sep: LiteralString, \/) -> tuple[LiteralString, LiteralSt/;"	m	class:str	typeref:typename:tuple[LiteralString,LiteralString,LiteralString]
pop	pyvscode.py	/^    def pop(self, index: SupportsIndex = -1, \/) -> _T: ...$/;"	m	class:list	typeref:typename:_T
pop	pyvscode.py	/^    def pop(self, index: int = -1, \/) -> int: ...$/;"	m	class:bytearray	typeref:typename:int
pop	pyvscode.py	/^    def pop(self, key: _KT, \/) -> _VT: ...$/;"	m	class:dict	typeref:typename:_VT
pop	pyvscode.py	/^    def pop(self, key: _KT, default: _T, \/) -> _VT | _T: ...$/;"	m	class:dict	typeref:typename:_VT|_T
pop	pyvscode.py	/^    def pop(self, key: _KT, default: _VT, \/) -> _VT: ...$/;"	m	class:dict	typeref:typename:_VT
pow	pyvscode.py	/^def pow(base: _NegativeInteger, exp: float, mod: None = None) -> complex: ...$/;"	f	typeref:typename:complex
pow	pyvscode.py	/^def pow(base: _PositiveInteger, exp: float, mod: None = None) -> float: ...$/;"	f	typeref:typename:float
pow	pyvscode.py	/^def pow(base: _SupportsPow2[_E, _T_co], exp: _E, mod: None = None) -> _T_co: ...  # type: ignore/;"	f	typeref:typename:_T_co
pow	pyvscode.py	/^def pow(base: _SupportsPow3NoneOnly[_E, _T_co], exp: _E, mod: None = None) -> _T_co: ...  # type/;"	f	typeref:typename:_T_co
pow	pyvscode.py	/^def pow(base: _SupportsPow3[_E, _M, _T_co], exp: _E, mod: _M) -> _T_co: ...$/;"	f	typeref:typename:_T_co
pow	pyvscode.py	/^def pow(base: _SupportsSomeKindOfPow, exp: complex, mod: None = None) -> complex: ...$/;"	f	typeref:typename:complex
pow	pyvscode.py	/^def pow(base: _SupportsSomeKindOfPow, exp: float, mod: None = None) -> Any: ...$/;"	f	typeref:typename:Any
pow	pyvscode.py	/^def pow(base: complex, exp: complex | _SupportsSomeKindOfPow, mod: None = None) -> complex: ...$/;"	f	typeref:typename:complex
pow	pyvscode.py	/^def pow(base: float, exp: complex | _SupportsSomeKindOfPow, mod: None = None) -> Any: ...$/;"	f	typeref:typename:Any
pow	pyvscode.py	/^def pow(base: float, exp: int, mod: None = None) -> float: ...$/;"	f	typeref:typename:float
pow	pyvscode.py	/^def pow(base: int, exp: Literal[0], mod: None = None) -> Literal[1]: ...$/;"	f	typeref:typename:Literal[1]
pow	pyvscode.py	/^def pow(base: int, exp: _NegativeInteger, mod: None = None) -> float: ...$/;"	f	typeref:typename:float
pow	pyvscode.py	/^def pow(base: int, exp: _PositiveInteger, mod: None = None) -> int: ...$/;"	f	typeref:typename:int
pow	pyvscode.py	/^def pow(base: int, exp: int, mod: None = None) -> Any: ...$/;"	f	typeref:typename:Any
pow	pyvscode.py	/^def pow(base: int, exp: int, mod: int) -> int: ...$/;"	f	typeref:typename:int
print	pyvscode.py	/^def print($/;"	f	typeref:typename:None
property	pyvscode.py	/^class property:$/;"	c
quit	pyvscode.py	/^def quit(code: sys._ExitCode = None) -> NoReturn: ...$/;"	f	typeref:typename:NoReturn
range	pyvscode.py	/^class range(Sequence[int]):$/;"	c
readonly	pyvscode.py	/^    def readonly(self) -> bool: ...$/;"	m	class:memoryview	typeref:typename:bool
real	pyvscode.py	/^    def real(self) -> float: ...$/;"	m	class:complex	typeref:typename:float
real	pyvscode.py	/^    def real(self) -> float: ...$/;"	m	class:float	typeref:typename:float
real	pyvscode.py	/^    def real(self) -> int: ...$/;"	m	class:int	typeref:typename:int
release	pyvscode.py	/^    def release(self) -> None: ...$/;"	m	class:memoryview	typeref:typename:None
remove	pyvscode.py	/^    def remove(self, element: _T, \/) -> None: ...$/;"	m	class:set	typeref:typename:None
remove	pyvscode.py	/^    def remove(self, value: _T, \/) -> None: ...$/;"	m	class:list	typeref:typename:None
remove	pyvscode.py	/^    def remove(self, value: int, \/) -> None: ...$/;"	m	class:bytearray	typeref:typename:None
removeprefix	pyvscode.py	/^        def removeprefix(self, prefix: ReadableBuffer, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
removeprefix	pyvscode.py	/^        def removeprefix(self, prefix: ReadableBuffer, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
removeprefix	pyvscode.py	/^        def removeprefix(self, prefix: str, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
removeprefix	pyvscode.py	/^        def removeprefix(self: LiteralString, prefix: LiteralString, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
removesuffix	pyvscode.py	/^        def removesuffix(self, suffix: ReadableBuffer, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
removesuffix	pyvscode.py	/^        def removesuffix(self, suffix: ReadableBuffer, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
removesuffix	pyvscode.py	/^        def removesuffix(self, suffix: str, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
removesuffix	pyvscode.py	/^        def removesuffix(self: LiteralString, suffix: LiteralString, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
replace	pyvscode.py	/^        def replace($/;"	m	class:str	typeref:typename:LiteralString
replace	pyvscode.py	/^        def replace(self, old: str, new: str, \/, count: SupportsIndex = -1) -> str: ...  # type/;"	m	class:str	typeref:typename:str
replace	pyvscode.py	/^        def replace(self, old: str, new: str, count: SupportsIndex = -1, \/) -> str: ...  # type/;"	m	class:str	typeref:typename:str
replace	pyvscode.py	/^    def replace(self, old: ReadableBuffer, new: ReadableBuffer, count: SupportsIndex = -1, \/) -/;"	m	class:bytearray	typeref:typename:bytearray
replace	pyvscode.py	/^    def replace(self, old: ReadableBuffer, new: ReadableBuffer, count: SupportsIndex = -1, \/) -/;"	m	class:bytes	typeref:typename:bytes
repr	pyvscode.py	/^def repr(obj: object, \/) -> str: ...$/;"	f	typeref:typename:str
reversed	pyvscode.py	/^class reversed(Iterator[_T]):$/;"	c
rfind	pyvscode.py	/^    def rfind($/;"	m	class:bytearray	typeref:typename:int
rfind	pyvscode.py	/^    def rfind($/;"	m	class:bytes	typeref:typename:int
rfind	pyvscode.py	/^    def rfind(self, sub: str, start: SupportsIndex | None = ..., end: SupportsIndex | None = .../;"	m	class:str	typeref:typename:int
rindex	pyvscode.py	/^    def rindex($/;"	m	class:bytearray	typeref:typename:int
rindex	pyvscode.py	/^    def rindex($/;"	m	class:bytes	typeref:typename:int
rindex	pyvscode.py	/^    def rindex(self, sub: str, start: SupportsIndex | None = ..., end: SupportsIndex | None = ../;"	m	class:str	typeref:typename:int
rjust	pyvscode.py	/^    def rjust(self, width: SupportsIndex, fillchar: bytes | bytearray = b" ", \/) -> bytearray: /;"	m	class:bytearray	typeref:typename:bytearray
rjust	pyvscode.py	/^    def rjust(self, width: SupportsIndex, fillchar: bytes | bytearray = b" ", \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
rjust	pyvscode.py	/^    def rjust(self, width: SupportsIndex, fillchar: str = " ", \/) -> str: ...  # type: ignore[m/;"	m	class:str	typeref:typename:str
rjust	pyvscode.py	/^    def rjust(self: LiteralString, width: SupportsIndex, fillchar: LiteralString = " ", \/) -> L/;"	m	class:str	typeref:typename:LiteralString
round	pyvscode.py	/^def round(number: _SupportsRound1[_T], ndigits: None = None) -> _T: ...$/;"	f	typeref:typename:_T
round	pyvscode.py	/^def round(number: _SupportsRound2[_T], ndigits: SupportsIndex) -> _T: ...$/;"	f	typeref:typename:_T
rpartition	pyvscode.py	/^    def rpartition(self, sep: ReadableBuffer, \/) -> tuple[bytearray, bytearray, bytearray]: ...$/;"	m	class:bytearray	typeref:typename:tuple[bytearray,bytearray,bytearray]
rpartition	pyvscode.py	/^    def rpartition(self, sep: ReadableBuffer, \/) -> tuple[bytes, bytes, bytes]: ...$/;"	m	class:bytes	typeref:typename:tuple[bytes,bytes,bytes]
rpartition	pyvscode.py	/^    def rpartition(self, sep: str, \/) -> tuple[str, str, str]: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:tuple[str,str,str]
rpartition	pyvscode.py	/^    def rpartition(self: LiteralString, sep: LiteralString, \/) -> tuple[LiteralString, LiteralS/;"	m	class:str	typeref:typename:tuple[LiteralString,LiteralString,LiteralString]
rsplit	pyvscode.py	/^    def rsplit(self, sep: ReadableBuffer | None = None, maxsplit: SupportsIndex = -1) -> list[by/;"	m	class:bytearray	typeref:typename:list[bytearray]
rsplit	pyvscode.py	/^    def rsplit(self, sep: ReadableBuffer | None = None, maxsplit: SupportsIndex = -1) -> list[by/;"	m	class:bytes	typeref:typename:list[bytes]
rsplit	pyvscode.py	/^    def rsplit(self, sep: str | None = None, maxsplit: SupportsIndex = -1) -> list[str]: ...  # /;"	m	class:str	typeref:typename:list[str]
rsplit	pyvscode.py	/^    def rsplit(self: LiteralString, sep: LiteralString | None = None, maxsplit: SupportsIndex = /;"	m	class:str	typeref:typename:list[LiteralString]
rstrip	pyvscode.py	/^    def rstrip(self, bytes: ReadableBuffer | None = None, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
rstrip	pyvscode.py	/^    def rstrip(self, bytes: ReadableBuffer | None = None, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
rstrip	pyvscode.py	/^    def rstrip(self, chars: str | None = None, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
rstrip	pyvscode.py	/^    def rstrip(self: LiteralString, chars: LiteralString | None = None, \/) -> LiteralString: ../;"	m	class:str	typeref:typename:LiteralString
set	pyvscode.py	/^class set(MutableSet[_T]):$/;"	c
setattr	pyvscode.py	/^def setattr(obj: object, name: str, value: Any, \/) -> None: ...$/;"	f	typeref:typename:None
setter	pyvscode.py	/^    def setter(self, fset: Callable[[Any, Any], None], \/) -> property: ...$/;"	m	class:property	typeref:typename:property
shape	pyvscode.py	/^    def shape(self) -> tuple[int, ...] | None: ...$/;"	m	class:memoryview	typeref:typename:tuple[int,...]|None
slice	pyvscode.py	/^class slice:$/;"	c
sort	pyvscode.py	/^    def sort(self, *, key: Callable[[_T], SupportsRichComparison], reverse: bool = False) -> Non/;"	m	class:list	typeref:typename:None
sort	pyvscode.py	/^    def sort(self: list[SupportsRichComparisonT], *, key: None = None, reverse: bool = False) ->/;"	m	class:list	typeref:typename:None
sorted	pyvscode.py	/^def sorted($/;"	f	typeref:typename:list[SupportsRichComparisonT]
sorted	pyvscode.py	/^def sorted(iterable: Iterable[_T], \/, *, key: Callable[[_T], SupportsRichComparison], reverse: /;"	f	typeref:typename:list[_T]
split	pyvscode.py	/^        def split($/;"	m	class:BaseExceptionGroup	typeref:typename:tuple[BaseExceptionGroup[_BaseExceptionT]|None,BaseExceptionGroup[_BaseExceptionT_co]|None]
split	pyvscode.py	/^        def split($/;"	m	class:BaseExceptionGroup	typeref:typename:tuple[BaseExceptionGroup[_BaseExceptionT_co]|None,BaseExceptionGroup[_BaseExceptionT_co]|None]
split	pyvscode.py	/^        def split($/;"	m	class:BaseExceptionGroup	typeref:typename:tuple[ExceptionGroup[_ExceptionT]|None,BaseExceptionGroup[_BaseExceptionT_co]|None]
split	pyvscode.py	/^        def split($/;"	m	class:ExceptionGroup	typeref:typename:tuple[ExceptionGroup[_ExceptionT]|None,ExceptionGroup[_ExceptionT_co]|None]
split	pyvscode.py	/^        def split($/;"	m	class:ExceptionGroup	typeref:typename:tuple[ExceptionGroup[_ExceptionT_co]|None,ExceptionGroup[_ExceptionT_co]|None]
split	pyvscode.py	/^    def split(self, sep: ReadableBuffer | None = None, maxsplit: SupportsIndex = -1) -> list[byt/;"	m	class:bytearray	typeref:typename:list[bytearray]
split	pyvscode.py	/^    def split(self, sep: ReadableBuffer | None = None, maxsplit: SupportsIndex = -1) -> list[byt/;"	m	class:bytes	typeref:typename:list[bytes]
split	pyvscode.py	/^    def split(self, sep: str | None = None, maxsplit: SupportsIndex = -1) -> list[str]: ...  # t/;"	m	class:str	typeref:typename:list[str]
split	pyvscode.py	/^    def split(self: LiteralString, sep: LiteralString | None = None, maxsplit: SupportsIndex = -/;"	m	class:str	typeref:typename:list[LiteralString]
splitlines	pyvscode.py	/^    def splitlines(self, keepends: bool = False) -> list[bytearray]: ...$/;"	m	class:bytearray	typeref:typename:list[bytearray]
splitlines	pyvscode.py	/^    def splitlines(self, keepends: bool = False) -> list[bytes]: ...$/;"	m	class:bytes	typeref:typename:list[bytes]
splitlines	pyvscode.py	/^    def splitlines(self, keepends: bool = False) -> list[str]: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:list[str]
splitlines	pyvscode.py	/^    def splitlines(self: LiteralString, keepends: bool = False) -> list[LiteralString]: ...$/;"	m	class:str	typeref:typename:list[LiteralString]
start	pyvscode.py	/^    def start(self) -> Any: ...$/;"	m	class:slice	typeref:typename:Any
start	pyvscode.py	/^    def start(self) -> int: ...$/;"	m	class:range	typeref:typename:int
startswith	pyvscode.py	/^    def startswith($/;"	m	class:bytearray	typeref:typename:bool
startswith	pyvscode.py	/^    def startswith($/;"	m	class:bytes	typeref:typename:bool
startswith	pyvscode.py	/^    def startswith($/;"	m	class:str	typeref:typename:bool
staticmethod	pyvscode.py	/^class staticmethod(Generic[_P, _R_co]):$/;"	c
step	pyvscode.py	/^    def step(self) -> Any: ...$/;"	m	class:slice	typeref:typename:Any
step	pyvscode.py	/^    def step(self) -> int: ...$/;"	m	class:range	typeref:typename:int
stop	pyvscode.py	/^    def stop(self) -> Any: ...$/;"	m	class:slice	typeref:typename:Any
stop	pyvscode.py	/^    def stop(self) -> int: ...$/;"	m	class:range	typeref:typename:int
str	pyvscode.py	/^class str(Sequence[str]):$/;"	c
strides	pyvscode.py	/^    def strides(self) -> tuple[int, ...] | None: ...$/;"	m	class:memoryview	typeref:typename:tuple[int,...]|None
strip	pyvscode.py	/^    def strip(self, bytes: ReadableBuffer | None = None, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
strip	pyvscode.py	/^    def strip(self, bytes: ReadableBuffer | None = None, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
strip	pyvscode.py	/^    def strip(self, chars: str | None = None, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
strip	pyvscode.py	/^    def strip(self: LiteralString, chars: LiteralString | None = None, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
subgroup	pyvscode.py	/^        def subgroup($/;"	m	class:BaseExceptionGroup	typeref:typename:BaseExceptionGroup[_BaseExceptionT]|None
subgroup	pyvscode.py	/^        def subgroup($/;"	m	class:BaseExceptionGroup	typeref:typename:BaseExceptionGroup[_BaseExceptionT_co]|None
subgroup	pyvscode.py	/^        def subgroup($/;"	m	class:BaseExceptionGroup	typeref:typename:ExceptionGroup[_ExceptionT]|None
subgroup	pyvscode.py	/^        def subgroup($/;"	m	class:ExceptionGroup	typeref:typename:ExceptionGroup[_ExceptionT]|None
subgroup	pyvscode.py	/^        def subgroup(self, condition: Callable[[_ExceptionT_co | Self], bool], \/) -> ExceptionG/;"	m	class:ExceptionGroup	typeref:typename:ExceptionGroup[_ExceptionT_co]|None
suboffsets	pyvscode.py	/^    def suboffsets(self) -> tuple[int, ...] | None: ...$/;"	m	class:memoryview	typeref:typename:tuple[int,...]|None
sum	pyvscode.py	/^def sum(iterable: Iterable[_AddableT1], \/, start: _AddableT2) -> _AddableT1 | _AddableT2: ...$/;"	f	typeref:typename:_AddableT1|_AddableT2
sum	pyvscode.py	/^def sum(iterable: Iterable[_SupportsSumNoDefaultT], \/) -> _SupportsSumNoDefaultT | Literal[0]: /;"	f	typeref:typename:_SupportsSumNoDefaultT|Literal[0]
sum	pyvscode.py	/^def sum(iterable: Iterable[bool | _LiteralInteger], \/, start: int = 0) -> int: ...  # type: ign/;"	f	typeref:typename:int
super	pyvscode.py	/^class super:$/;"	c
swapcase	pyvscode.py	/^    def swapcase(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
swapcase	pyvscode.py	/^    def swapcase(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
swapcase	pyvscode.py	/^    def swapcase(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
swapcase	pyvscode.py	/^    def swapcase(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
symmetric_difference	pyvscode.py	/^    def symmetric_difference(self, s: Iterable[_T], \/) -> set[_T]: ...$/;"	m	class:set	typeref:typename:set[_T]
symmetric_difference	pyvscode.py	/^    def symmetric_difference(self, s: Iterable[_T_co], \/) -> frozenset[_T_co]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co]
symmetric_difference_update	pyvscode.py	/^    def symmetric_difference_update(self, s: Iterable[_T], \/) -> None: ...$/;"	m	class:set	typeref:typename:None
title	pyvscode.py	/^    def title(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
title	pyvscode.py	/^    def title(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
title	pyvscode.py	/^    def title(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
title	pyvscode.py	/^    def title(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
to_bytes	pyvscode.py	/^        def to_bytes($/;"	m	class:int	typeref:typename:bytes
to_bytes	pyvscode.py	/^        def to_bytes(self, length: SupportsIndex, byteorder: Literal["little", "big"], *, signed/;"	m	class:int	typeref:typename:bytes
tobytes	pyvscode.py	/^        def tobytes(self, order: Literal["C", "F", "A"] | None = "C") -> bytes: ...$/;"	m	class:memoryview	typeref:typename:bytes
tobytes	pyvscode.py	/^        def tobytes(self, order: Literal["C", "F", "A"] | None = None) -> bytes: ...$/;"	m	class:memoryview	typeref:typename:bytes
tolist	pyvscode.py	/^    def tolist(self) -> list[int]: ...$/;"	m	class:memoryview	typeref:typename:list[int]
toreadonly	pyvscode.py	/^    def toreadonly(self) -> memoryview: ...$/;"	m	class:memoryview	typeref:typename:memoryview
translate	pyvscode.py	/^    def translate(self, table: ReadableBuffer | None, \/, delete: bytes = b"") -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
translate	pyvscode.py	/^    def translate(self, table: ReadableBuffer | None, \/, delete: bytes = b"") -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
translate	pyvscode.py	/^    def translate(self, table: _TranslateTable, \/) -> str: ...$/;"	m	class:str	typeref:typename:str
tuple	pyvscode.py	/^class tuple(Sequence[_T_co]):$/;"	c
type	pyvscode.py	/^class type:$/;"	c
union	pyvscode.py	/^    def union(self, *s: Iterable[_S]) -> frozenset[_T_co | _S]: ...$/;"	m	class:frozenset	typeref:typename:frozenset[_T_co|_S]
union	pyvscode.py	/^    def union(self, *s: Iterable[_S]) -> set[_T | _S]: ...$/;"	m	class:set	typeref:typename:set[_T|_S]
update	pyvscode.py	/^    def update(self, *s: Iterable[_T]) -> None: ...$/;"	m	class:set	typeref:typename:None
upper	pyvscode.py	/^    def upper(self) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
upper	pyvscode.py	/^    def upper(self) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
upper	pyvscode.py	/^    def upper(self) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
upper	pyvscode.py	/^    def upper(self: LiteralString) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
values	pyvscode.py	/^    def values(self) -> dict_values[_KT, _VT]: ...$/;"	m	class:dict	typeref:typename:dict_values[_KT,_VT]
vars	pyvscode.py	/^def vars(object: Any = ..., \/) -> dict[str, Any]: ...$/;"	f	typeref:typename:dict[str,Any]
vars	pyvscode.py	/^def vars(object: type, \/) -> types.MappingProxyType[str, Any]: ...  # type: ignore[overload-ove/;"	f	typeref:typename:types.MappingProxyType[str,Any]
with_traceback	pyvscode.py	/^    def with_traceback(self, tb: TracebackType | None, \/) -> Self: ...$/;"	m	class:BaseException	typeref:typename:Self
zfill	pyvscode.py	/^    def zfill(self, width: SupportsIndex, \/) -> bytearray: ...$/;"	m	class:bytearray	typeref:typename:bytearray
zfill	pyvscode.py	/^    def zfill(self, width: SupportsIndex, \/) -> bytes: ...$/;"	m	class:bytes	typeref:typename:bytes
zfill	pyvscode.py	/^    def zfill(self, width: SupportsIndex, \/) -> str: ...  # type: ignore[misc]$/;"	m	class:str	typeref:typename:str
zfill	pyvscode.py	/^    def zfill(self: LiteralString, width: SupportsIndex, \/) -> LiteralString: ...$/;"	m	class:str	typeref:typename:LiteralString
zip	pyvscode.py	/^class zip(Iterator[_T_co]):$/;"	c
